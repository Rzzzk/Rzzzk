
micro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f7a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00003f7a  00003fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000031c8  00000000  00000000  00004094  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d05  00000000  00000000  0000725c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000080a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00008211  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000ad45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000baf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000bc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000bee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c6af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 11 0c 	call	0x1822	; 0x1822 <main>
      7a:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae ef       	ldi	r26, 0xFE	; 254
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8e ef       	ldi	r24, 0xFE	; 254
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     b3e:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_init>
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <EEPROM_writeByte+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     b5a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     b5e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	11 f0       	breq	.+4      	; 0xb6a <EEPROM_writeByte+0x22>
        return ERROR;
     b66:	1c 82       	std	Y+4, r1	; 0x04
     b68:	28 c0       	rjmp	.+80     	; 0xbba <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	80 70       	andi	r24, 0x00	; 0
     b70:	97 70       	andi	r25, 0x07	; 7
     b72:	88 0f       	add	r24, r24
     b74:	89 2f       	mov	r24, r25
     b76:	88 1f       	adc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	91 95       	neg	r25
     b7c:	80 6a       	ori	r24, 0xA0	; 160
     b7e:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     b82:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b86:	88 31       	cpi	r24, 0x18	; 24
     b88:	11 f0       	breq	.+4      	; 0xb8e <EEPROM_writeByte+0x46>
        return ERROR; 
     b8a:	1c 82       	std	Y+4, r1	; 0x04
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     b94:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b98:	88 32       	cpi	r24, 0x28	; 40
     b9a:	11 f0       	breq	.+4      	; 0xba0 <EEPROM_writeByte+0x58>
        return ERROR;
     b9c:	1c 82       	std	Y+4, r1	; 0x04
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     ba6:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	11 f0       	breq	.+4      	; 0xbb2 <EEPROM_writeByte+0x6a>
        return ERROR;
     bae:	1c 82       	std	Y+4, r1	; 0x04
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     bb2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
	
    return SUCCESS;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <EEPROM_readByte+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	7c 83       	std	Y+4, r23	; 0x04
     bde:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     be0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     be4:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_readByte+0x26>
        return ERROR;
     bec:	1d 82       	std	Y+5, r1	; 0x05
     bee:	44 c0       	rjmp	.+136    	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	80 70       	andi	r24, 0x00	; 0
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	80 6a       	ori	r24, 0xA0	; 160
     c04:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c08:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <EEPROM_readByte+0x4a>
        return ERROR;
     c10:	1d 82       	std	Y+5, r1	; 0x05
     c12:	32 c0       	rjmp	.+100    	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	11 f0       	breq	.+4      	; 0xc26 <EEPROM_readByte+0x5c>
        return ERROR;
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     c26:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     c2a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x6c>
        return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	81 6a       	ori	r24, 0xA1	; 161
     c4a:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c4e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c52:	80 34       	cpi	r24, 0x40	; 64
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_readByte+0x90>
        return ERROR;
     c56:	1d 82       	std	Y+5, r1	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     c5a:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_readWithNACK>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     c64:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c68:	88 35       	cpi	r24, 0x58	; 88
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_readByte+0xa6>
        return ERROR;
     c6c:	1d 82       	std	Y+5, r1	; 0x05
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     c70:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
    return SUCCESS;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     c92:	e0 e2       	ldi	r30, 0x20	; 32
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
	TWSR = 0x00;
     c9a:	e1 e2       	ldi	r30, 0x21	; 33
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     ca0:	e2 e2       	ldi	r30, 0x22	; 34
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     ca8:	e6 e5       	ldi	r30, 0x56	; 86
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	80 83       	st	Z, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <TWI_start>:

void TWI_start(void)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     cbe:	e6 e5       	ldi	r30, 0x56	; 86
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	84 ea       	ldi	r24, 0xA4	; 164
     cc4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     cc6:	e6 e5       	ldi	r30, 0x56	; 86
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 23       	and	r24, r24
     cce:	dc f7       	brge	.-10     	; 0xcc6 <TWI_start+0x10>
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <TWI_stop>:

void TWI_stop(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     cde:	e6 e5       	ldi	r30, 0x56	; 86
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	84 e9       	ldi	r24, 0x94	; 148
     ce4:	80 83       	st	Z, r24
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_write>:

void TWI_write(uint8 data)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     cf8:	e3 e2       	ldi	r30, 0x23	; 35
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     d00:	e6 e5       	ldi	r30, 0x56	; 86
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	84 e8       	ldi	r24, 0x84	; 132
     d06:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d08:	e6 e5       	ldi	r30, 0x56	; 86
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <TWI_write+0x1c>
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	84 ec       	ldi	r24, 0xC4	; 196
     d28:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d2a:	e6 e5       	ldi	r30, 0x56	; 86
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	dc f7       	brge	.-10     	; 0xd2a <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     d34:	e3 e2       	ldi	r30, 0x23	; 35
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     d48:	e6 e5       	ldi	r30, 0x56	; 86
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e8       	ldi	r24, 0x84	; 132
     d4e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d50:	e6 e5       	ldi	r30, 0x56	; 86
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 23       	and	r24, r24
     d58:	dc f7       	brge	.-10     	; 0xd50 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     d5a:	e3 e2       	ldi	r30, 0x23	; 35
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     d70:	e1 e2       	ldi	r30, 0x21	; 33
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 7f       	andi	r24, 0xF8	; 248
     d78:	89 83       	std	Y+1, r24	; 0x01
    return status;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <keypad_getpressed_key>:
 static uint8 keypad_4x3_adjust_keyNumber(uint8 button_number);
#elif(N_COL==4)
 static uint8 keypad_4x4_adjust_keyNumber(uint8 button_number);
#endif

uint8 keypad_getpressed_key(void){
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <keypad_getpressed_key+0x6>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
   uint8 col , row ;

	while(1){

		for(col=0 ; col<N_COL ; col++){
     d8e:	1a 82       	std	Y+2, r1	; 0x02
     d90:	4d c0       	rjmp	.+154    	; 0xe2c <keypad_getpressed_key+0xa8>

			KEYPAD_PORT_DIR =   (0b00010000<<col);
     d92:	e7 e3       	ldi	r30, 0x37	; 55
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	80 e1       	ldi	r24, 0x10	; 16
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <keypad_getpressed_key+0x22>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <keypad_getpressed_key+0x1e>
     daa:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<<col));  // 1110 1111
     dac:	e8 e3       	ldi	r30, 0x38	; 56
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	80 e1       	ldi	r24, 0x10	; 16
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <keypad_getpressed_key+0x3e>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <keypad_getpressed_key+0x3a>
     dc6:	80 95       	com	r24
     dc8:	80 83       	st	Z, r24

			for(row=0 ; row<N_ROW ;row++){
     dca:	19 82       	std	Y+1, r1	; 0x01
     dcc:	29 c0       	rjmp	.+82     	; 0xe20 <keypad_getpressed_key+0x9c>
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN , row)){
     dce:	e6 e3       	ldi	r30, 0x36	; 54
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a9 01       	movw	r20, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <keypad_getpressed_key+0x62>
     de2:	55 95       	asr	r21
     de4:	47 95       	ror	r20
     de6:	8a 95       	dec	r24
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <keypad_getpressed_key+0x5e>
     dea:	ca 01       	movw	r24, r20
     dec:	81 70       	andi	r24, 0x01	; 1
     dee:	90 70       	andi	r25, 0x00	; 0
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	99 f4       	brne	.+38     	; 0xe1a <keypad_getpressed_key+0x96>
                      #if(N_COL==3)
					  return (keypad_4x3_adjust_keyNumber((row*N_COL)+col+1));
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	82 0f       	add	r24, r18
     e02:	93 1f       	adc	r25, r19
     e04:	98 2f       	mov	r25, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	89 0f       	add	r24, r25
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	0e 94 1b 07 	call	0xe36	; 0xe36 <keypad_4x3_adjust_keyNumber>
                      #endif
				}
			}
		}
	}
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

			KEYPAD_PORT_DIR =   (0b00010000<<col);

			KEYPAD_PORT_OUT = (~(0b00010000<<col));  // 1110 1111

			for(row=0 ; row<N_ROW ;row++){
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	a0 f2       	brcs	.-88     	; 0xdce <keypad_getpressed_key+0x4a>
uint8 keypad_getpressed_key(void){
   uint8 col , row ;

	while(1){

		for(col=0 ; col<N_COL ; col++){
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	08 f4       	brcc	.+2      	; 0xe34 <keypad_getpressed_key+0xb0>
     e32:	af cf       	rjmp	.-162    	; 0xd92 <keypad_getpressed_key+0xe>
     e34:	ac cf       	rjmp	.-168    	; 0xd8e <keypad_getpressed_key+0xa>

00000e36 <keypad_4x3_adjust_keyNumber>:
	}
}

#if(N_COL==3)

static uint8 keypad_4x3_adjust_keyNumber(uint8 button_number){
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <keypad_4x3_adjust_keyNumber+0x6>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <keypad_4x3_adjust_keyNumber+0x8>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	89 83       	std	Y+1, r24	; 0x01

	switch(button_number){
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3c 83       	std	Y+4, r19	; 0x04
     e4c:	2b 83       	std	Y+3, r18	; 0x03
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	8a 30       	cpi	r24, 0x0A	; 10
     e54:	91 05       	cpc	r25, r1
     e56:	81 f0       	breq	.+32     	; 0xe78 <keypad_4x3_adjust_keyNumber+0x42>
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	2a 30       	cpi	r18, 0x0A	; 10
     e5e:	31 05       	cpc	r19, r1
     e60:	9c f0       	brlt	.+38     	; 0xe88 <keypad_4x3_adjust_keyNumber+0x52>
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	8b 30       	cpi	r24, 0x0B	; 11
     e68:	91 05       	cpc	r25, r1
     e6a:	49 f0       	breq	.+18     	; 0xe7e <keypad_4x3_adjust_keyNumber+0x48>
     e6c:	2b 81       	ldd	r18, Y+3	; 0x03
     e6e:	3c 81       	ldd	r19, Y+4	; 0x04
     e70:	2c 30       	cpi	r18, 0x0C	; 12
     e72:	31 05       	cpc	r19, r1
     e74:	31 f0       	breq	.+12     	; 0xe82 <keypad_4x3_adjust_keyNumber+0x4c>
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <keypad_4x3_adjust_keyNumber+0x52>
	case 10 :
		return '*' ;
     e78:	3a e2       	ldi	r19, 0x2A	; 42
     e7a:	3a 83       	std	Y+2, r19	; 0x02
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <keypad_4x3_adjust_keyNumber+0x56>
		break;
	case 11 :
		return 0 ;
     e7e:	1a 82       	std	Y+2, r1	; 0x02
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <keypad_4x3_adjust_keyNumber+0x56>
		break;
	case 12 :
		return '#' ;
     e82:	83 e2       	ldi	r24, 0x23	; 35
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <keypad_4x3_adjust_keyNumber+0x56>
		break;
	default : return button_number;
     e88:	99 81       	ldd	r25, Y+1	; 0x01
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <LCD_init>:
 */


#include"lcd.h"

void LCD_init(void){
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62

	LCD_DATA_DIR=0xFF; //set data port as output
     ea4:	ea e3       	ldi	r30, 0x3A	; 58
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	80 83       	st	Z, r24
	LCD_CTR_DIR|=(1<<RS)|(1<<E)|(1<<RW); // set (RS , E & RW ) output
     eac:	a1 e3       	ldi	r26, 0x31	; 49
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8c 61       	ori	r24, 0x1C	; 28
     eb8:	8c 93       	st	X, r24

	LCD_sendCommand(TWO_LINE_EIGHT_BIN); // mode 2*8
     eba:	88 e3       	ldi	r24, 0x38	; 56
     ebc:	0e 94 69 07 	call	0xed2	; 0xed2 <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF); // cursor off
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	0e 94 69 07 	call	0xed2	; 0xed2 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); // clear the display screen
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 69 07 	call	0xed2	; 0xed2 <LCD_sendCommand>

}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	e9 97       	sbiw	r28, 0x39	; 57
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	89 af       	std	Y+57, r24	; 0x39

	/*control RS & RW*/
	/*clear (RS & RW)*/
	CLEAR_BIT(LCD_CTR_PORT,RS);// RS= LOW -> instruction  mode
     ee8:	a2 e3       	ldi	r26, 0x32	; 50
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 7e       	andi	r24, 0xEF	; 239
     ef4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTR_PORT,RW);// RW= LOW -> write        mode
     ef6:	a2 e3       	ldi	r26, 0x32	; 50
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e2 e3       	ldi	r30, 0x32	; 50
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	8c 93       	st	X, r24
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a0 e8       	ldi	r26, 0x80	; 128
     f0a:	bf e3       	ldi	r27, 0x3F	; 63
     f0c:	8d ab       	std	Y+53, r24	; 0x35
     f0e:	9e ab       	std	Y+54, r25	; 0x36
     f10:	af ab       	std	Y+55, r26	; 0x37
     f12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6d a9       	ldd	r22, Y+53	; 0x35
     f16:	7e a9       	ldd	r23, Y+54	; 0x36
     f18:	8f a9       	ldd	r24, Y+55	; 0x37
     f1a:	98 ad       	ldd	r25, Y+56	; 0x38
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a e7       	ldi	r20, 0x7A	; 122
     f22:	53 e4       	ldi	r21, 0x43	; 67
     f24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	89 ab       	std	Y+49, r24	; 0x31
     f2e:	9a ab       	std	Y+50, r25	; 0x32
     f30:	ab ab       	std	Y+51, r26	; 0x33
     f32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f34:	69 a9       	ldd	r22, Y+49	; 0x31
     f36:	7a a9       	ldd	r23, Y+50	; 0x32
     f38:	8b a9       	ldd	r24, Y+51	; 0x33
     f3a:	9c a9       	ldd	r25, Y+52	; 0x34
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <LCD_sendCommand+0x84>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	98 ab       	std	Y+48, r25	; 0x30
     f52:	8f a7       	std	Y+47, r24	; 0x2f
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     f56:	69 a9       	ldd	r22, Y+49	; 0x31
     f58:	7a a9       	ldd	r23, Y+50	; 0x32
     f5a:	8b a9       	ldd	r24, Y+51	; 0x33
     f5c:	9c a9       	ldd	r25, Y+52	; 0x34
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6d a9       	ldd	r22, Y+53	; 0x35
     f70:	7e a9       	ldd	r23, Y+54	; 0x36
     f72:	8f a9       	ldd	r24, Y+55	; 0x37
     f74:	98 ad       	ldd	r25, Y+56	; 0x38
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	98 ab       	std	Y+48, r25	; 0x30
     f94:	8f a7       	std	Y+47, r24	; 0x2f
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <LCD_sendCommand+0xe4>
     f98:	89 e1       	ldi	r24, 0x19	; 25
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9e a7       	std	Y+46, r25	; 0x2e
     f9e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa0:	8d a5       	ldd	r24, Y+45	; 0x2d
     fa2:	9e a5       	ldd	r25, Y+46	; 0x2e
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <LCD_sendCommand+0xd2>
     fa8:	9e a7       	std	Y+46, r25	; 0x2e
     faa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8f a5       	ldd	r24, Y+47	; 0x2f
     fae:	98 a9       	ldd	r25, Y+48	; 0x30
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	98 ab       	std	Y+48, r25	; 0x30
     fb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb8:	98 a9       	ldd	r25, Y+48	; 0x30
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <LCD_sendCommand+0xc6>
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	69 a9       	ldd	r22, Y+49	; 0x31
     fc2:	7a a9       	ldd	r23, Y+50	; 0x32
     fc4:	8b a9       	ldd	r24, Y+51	; 0x33
     fc6:	9c a9       	ldd	r25, Y+52	; 0x34
     fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	98 ab       	std	Y+48, r25	; 0x30
     fd2:	8f a7       	std	Y+47, r24	; 0x2f
     fd4:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd6:	98 a9       	ldd	r25, Y+48	; 0x30
     fd8:	9c a7       	std	Y+44, r25	; 0x2c
     fda:	8b a7       	std	Y+43, r24	; 0x2b
     fdc:	8b a5       	ldd	r24, Y+43	; 0x2b
     fde:	9c a5       	ldd	r25, Y+44	; 0x2c
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <LCD_sendCommand+0x10e>
     fe4:	9c a7       	std	Y+44, r25	; 0x2c
     fe6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	SET_BIT(LCD_CTR_PORT,E);   // set enable
     fe8:	a2 e3       	ldi	r26, 0x32	; 50
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	84 60       	ori	r24, 0x04	; 4
     ff4:	8c 93       	st	X, r24
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e8       	ldi	r26, 0x80	; 128
     ffc:	bf e3       	ldi	r27, 0x3F	; 63
     ffe:	8f a3       	std	Y+39, r24	; 0x27
    1000:	98 a7       	std	Y+40, r25	; 0x28
    1002:	a9 a7       	std	Y+41, r26	; 0x29
    1004:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	6f a1       	ldd	r22, Y+39	; 0x27
    1008:	78 a5       	ldd	r23, Y+40	; 0x28
    100a:	89 a5       	ldd	r24, Y+41	; 0x29
    100c:	9a a5       	ldd	r25, Y+42	; 0x2a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a e7       	ldi	r20, 0x7A	; 122
    1014:	53 e4       	ldi	r21, 0x43	; 67
    1016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	8b a3       	std	Y+35, r24	; 0x23
    1020:	9c a3       	std	Y+36, r25	; 0x24
    1022:	ad a3       	std	Y+37, r26	; 0x25
    1024:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1026:	6b a1       	ldd	r22, Y+35	; 0x23
    1028:	7c a1       	ldd	r23, Y+36	; 0x24
    102a:	8d a1       	ldd	r24, Y+37	; 0x25
    102c:	9e a1       	ldd	r25, Y+38	; 0x26
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    103a:	88 23       	and	r24, r24
    103c:	2c f4       	brge	.+10     	; 0x1048 <LCD_sendCommand+0x176>
		__ticks = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9a a3       	std	Y+34, r25	; 0x22
    1044:	89 a3       	std	Y+33, r24	; 0x21
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1048:	6b a1       	ldd	r22, Y+35	; 0x23
    104a:	7c a1       	ldd	r23, Y+36	; 0x24
    104c:	8d a1       	ldd	r24, Y+37	; 0x25
    104e:	9e a1       	ldd	r25, Y+38	; 0x26
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	4c f5       	brge	.+82     	; 0x10b2 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	6f a1       	ldd	r22, Y+39	; 0x27
    1062:	78 a5       	ldd	r23, Y+40	; 0x28
    1064:	89 a5       	ldd	r24, Y+41	; 0x29
    1066:	9a a5       	ldd	r25, Y+42	; 0x2a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9a a3       	std	Y+34, r25	; 0x22
    1086:	89 a3       	std	Y+33, r24	; 0x21
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <LCD_sendCommand+0x1d6>
    108a:	89 e1       	ldi	r24, 0x19	; 25
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	98 a3       	std	Y+32, r25	; 0x20
    1090:	8f 8f       	std	Y+31, r24	; 0x1f
    1092:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1094:	98 a1       	ldd	r25, Y+32	; 0x20
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <LCD_sendCommand+0x1c4>
    109a:	98 a3       	std	Y+32, r25	; 0x20
    109c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109e:	89 a1       	ldd	r24, Y+33	; 0x21
    10a0:	9a a1       	ldd	r25, Y+34	; 0x22
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9a a3       	std	Y+34, r25	; 0x22
    10a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a8:	89 a1       	ldd	r24, Y+33	; 0x21
    10aa:	9a a1       	ldd	r25, Y+34	; 0x22
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f7       	brne	.-38     	; 0x108a <LCD_sendCommand+0x1b8>
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b2:	6b a1       	ldd	r22, Y+35	; 0x23
    10b4:	7c a1       	ldd	r23, Y+36	; 0x24
    10b6:	8d a1       	ldd	r24, Y+37	; 0x25
    10b8:	9e a1       	ldd	r25, Y+38	; 0x26
    10ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9a a3       	std	Y+34, r25	; 0x22
    10c4:	89 a3       	std	Y+33, r24	; 0x21
    10c6:	89 a1       	ldd	r24, Y+33	; 0x21
    10c8:	9a a1       	ldd	r25, Y+34	; 0x22
    10ca:	9e 8f       	std	Y+30, r25	; 0x1e
    10cc:	8d 8f       	std	Y+29, r24	; 0x1d
    10ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <LCD_sendCommand+0x200>
    10d6:	9e 8f       	std	Y+30, r25	; 0x1e
    10d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT= command;    //send command
    10da:	eb e3       	ldi	r30, 0x3B	; 59
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	89 ad       	ldd	r24, Y+57	; 0x39
    10e0:	80 83       	st	Z, r24
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e8       	ldi	r26, 0x80	; 128
    10e8:	bf e3       	ldi	r27, 0x3F	; 63
    10ea:	89 8f       	std	Y+25, r24	; 0x19
    10ec:	9a 8f       	std	Y+26, r25	; 0x1a
    10ee:	ab 8f       	std	Y+27, r26	; 0x1b
    10f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	69 8d       	ldd	r22, Y+25	; 0x19
    10f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a e7       	ldi	r20, 0x7A	; 122
    1100:	53 e4       	ldi	r21, 0x43	; 67
    1102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	8d 8b       	std	Y+21, r24	; 0x15
    110c:	9e 8b       	std	Y+22, r25	; 0x16
    110e:	af 8b       	std	Y+23, r26	; 0x17
    1110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1112:	6d 89       	ldd	r22, Y+21	; 0x15
    1114:	7e 89       	ldd	r23, Y+22	; 0x16
    1116:	8f 89       	ldd	r24, Y+23	; 0x17
    1118:	98 8d       	ldd	r25, Y+24	; 0x18
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <LCD_sendCommand+0x262>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 8b       	std	Y+20, r25	; 0x14
    1130:	8b 8b       	std	Y+19, r24	; 0x13
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1134:	6d 89       	ldd	r22, Y+21	; 0x15
    1136:	7e 89       	ldd	r23, Y+22	; 0x16
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	98 8d       	ldd	r25, Y+24	; 0x18
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	69 8d       	ldd	r22, Y+25	; 0x19
    114e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9c 8b       	std	Y+20, r25	; 0x14
    1172:	8b 8b       	std	Y+19, r24	; 0x13
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <LCD_sendCommand+0x2c2>
    1176:	89 e1       	ldi	r24, 0x19	; 25
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9a 8b       	std	Y+18, r25	; 0x12
    117c:	89 8b       	std	Y+17, r24	; 0x11
    117e:	89 89       	ldd	r24, Y+17	; 0x11
    1180:	9a 89       	ldd	r25, Y+18	; 0x12
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <LCD_sendCommand+0x2b0>
    1186:	9a 8b       	std	Y+18, r25	; 0x12
    1188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8b 89       	ldd	r24, Y+19	; 0x13
    118c:	9c 89       	ldd	r25, Y+20	; 0x14
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	9c 89       	ldd	r25, Y+20	; 0x14
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <LCD_sendCommand+0x2a4>
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	6d 89       	ldd	r22, Y+21	; 0x15
    11a0:	7e 89       	ldd	r23, Y+22	; 0x16
    11a2:	8f 89       	ldd	r24, Y+23	; 0x17
    11a4:	98 8d       	ldd	r25, Y+24	; 0x18
    11a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	8b 89       	ldd	r24, Y+19	; 0x13
    11b4:	9c 89       	ldd	r25, Y+20	; 0x14
    11b6:	98 8b       	std	Y+16, r25	; 0x10
    11b8:	8f 87       	std	Y+15, r24	; 0x0f
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	98 89       	ldd	r25, Y+16	; 0x10
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <LCD_sendCommand+0x2ec>
    11c2:	98 8b       	std	Y+16, r25	; 0x10
    11c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTR_PORT,E); //clear enable
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8b 7f       	andi	r24, 0xFB	; 251
    11d2:	8c 93       	st	X, r24
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e8       	ldi	r26, 0x80	; 128
    11da:	bf e3       	ldi	r27, 0x3F	; 63
    11dc:	8b 87       	std	Y+11, r24	; 0x0b
    11de:	9c 87       	std	Y+12, r25	; 0x0c
    11e0:	ad 87       	std	Y+13, r26	; 0x0d
    11e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	4a e7       	ldi	r20, 0x7A	; 122
    11f2:	53 e4       	ldi	r21, 0x43	; 67
    11f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	8f 83       	std	Y+7, r24	; 0x07
    11fe:	98 87       	std	Y+8, r25	; 0x08
    1200:	a9 87       	std	Y+9, r26	; 0x09
    1202:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1204:	6f 81       	ldd	r22, Y+7	; 0x07
    1206:	78 85       	ldd	r23, Y+8	; 0x08
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <LCD_sendCommand+0x354>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	8d 83       	std	Y+5, r24	; 0x05
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1226:	6f 81       	ldd	r22, Y+7	; 0x07
    1228:	78 85       	ldd	r23, Y+8	; 0x08
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	9a 85       	ldd	r25, Y+10	; 0x0a
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	4f e7       	ldi	r20, 0x7F	; 127
    1234:	57 e4       	ldi	r21, 0x47	; 71
    1236:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    123a:	18 16       	cp	r1, r24
    123c:	4c f5       	brge	.+82     	; 0x1290 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1240:	7c 85       	ldd	r23, Y+12	; 0x0c
    1242:	8d 85       	ldd	r24, Y+13	; 0x0d
    1244:	9e 85       	ldd	r25, Y+14	; 0x0e
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <LCD_sendCommand+0x3b4>
    1268:	89 e1       	ldi	r24, 0x19	; 25
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	8b 83       	std	Y+3, r24	; 0x03
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_sendCommand+0x3a2>
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f7       	brne	.-38     	; 0x1268 <LCD_sendCommand+0x396>
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	9a 83       	std	Y+2, r25	; 0x02
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCD_sendCommand+0x3de>
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    12b8:	e9 96       	adiw	r28, 0x39	; 57
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LCD_displayCharacter>:


void LCD_displayCharacter(uint8 data){
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	e9 97       	sbiw	r28, 0x39	; 57
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	89 af       	std	Y+57, r24	; 0x39

	/*control RS & RW*/
	/*clear (RS & RW)*/
	SET_BIT(LCD_CTR_PORT,RS);   // RS= HIGH -> data  mode
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 61       	ori	r24, 0x10	; 16
    12ec:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTR_PORT,RW); // RW= LOW  -> write mode
    12ee:	a2 e3       	ldi	r26, 0x32	; 50
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	87 7f       	andi	r24, 0xF7	; 247
    12fa:	8c 93       	st	X, r24
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e8       	ldi	r26, 0x80	; 128
    1302:	bf e3       	ldi	r27, 0x3F	; 63
    1304:	8d ab       	std	Y+53, r24	; 0x35
    1306:	9e ab       	std	Y+54, r25	; 0x36
    1308:	af ab       	std	Y+55, r26	; 0x37
    130a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130c:	6d a9       	ldd	r22, Y+53	; 0x35
    130e:	7e a9       	ldd	r23, Y+54	; 0x36
    1310:	8f a9       	ldd	r24, Y+55	; 0x37
    1312:	98 ad       	ldd	r25, Y+56	; 0x38
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	4a e7       	ldi	r20, 0x7A	; 122
    131a:	53 e4       	ldi	r21, 0x43	; 67
    131c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	89 ab       	std	Y+49, r24	; 0x31
    1326:	9a ab       	std	Y+50, r25	; 0x32
    1328:	ab ab       	std	Y+51, r26	; 0x33
    132a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    132c:	69 a9       	ldd	r22, Y+49	; 0x31
    132e:	7a a9       	ldd	r23, Y+50	; 0x32
    1330:	8b a9       	ldd	r24, Y+51	; 0x33
    1332:	9c a9       	ldd	r25, Y+52	; 0x34
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1340:	88 23       	and	r24, r24
    1342:	2c f4       	brge	.+10     	; 0x134e <LCD_displayCharacter+0x84>
		__ticks = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	98 ab       	std	Y+48, r25	; 0x30
    134a:	8f a7       	std	Y+47, r24	; 0x2f
    134c:	3f c0       	rjmp	.+126    	; 0x13cc <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    134e:	69 a9       	ldd	r22, Y+49	; 0x31
    1350:	7a a9       	ldd	r23, Y+50	; 0x32
    1352:	8b a9       	ldd	r24, Y+51	; 0x33
    1354:	9c a9       	ldd	r25, Y+52	; 0x34
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	4f e7       	ldi	r20, 0x7F	; 127
    135c:	57 e4       	ldi	r21, 0x47	; 71
    135e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1362:	18 16       	cp	r1, r24
    1364:	4c f5       	brge	.+82     	; 0x13b8 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1366:	6d a9       	ldd	r22, Y+53	; 0x35
    1368:	7e a9       	ldd	r23, Y+54	; 0x36
    136a:	8f a9       	ldd	r24, Y+55	; 0x37
    136c:	98 ad       	ldd	r25, Y+56	; 0x38
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	98 ab       	std	Y+48, r25	; 0x30
    138c:	8f a7       	std	Y+47, r24	; 0x2f
    138e:	0f c0       	rjmp	.+30     	; 0x13ae <LCD_displayCharacter+0xe4>
    1390:	89 e1       	ldi	r24, 0x19	; 25
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9e a7       	std	Y+46, r25	; 0x2e
    1396:	8d a7       	std	Y+45, r24	; 0x2d
    1398:	8d a5       	ldd	r24, Y+45	; 0x2d
    139a:	9e a5       	ldd	r25, Y+46	; 0x2e
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <LCD_displayCharacter+0xd2>
    13a0:	9e a7       	std	Y+46, r25	; 0x2e
    13a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a6:	98 a9       	ldd	r25, Y+48	; 0x30
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	98 ab       	std	Y+48, r25	; 0x30
    13ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b0:	98 a9       	ldd	r25, Y+48	; 0x30
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	69 f7       	brne	.-38     	; 0x1390 <LCD_displayCharacter+0xc6>
    13b6:	14 c0       	rjmp	.+40     	; 0x13e0 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ba:	7a a9       	ldd	r23, Y+50	; 0x32
    13bc:	8b a9       	ldd	r24, Y+51	; 0x33
    13be:	9c a9       	ldd	r25, Y+52	; 0x34
    13c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	98 ab       	std	Y+48, r25	; 0x30
    13ca:	8f a7       	std	Y+47, r24	; 0x2f
    13cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ce:	98 a9       	ldd	r25, Y+48	; 0x30
    13d0:	9c a7       	std	Y+44, r25	; 0x2c
    13d2:	8b a7       	std	Y+43, r24	; 0x2b
    13d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <LCD_displayCharacter+0x10e>
    13dc:	9c a7       	std	Y+44, r25	; 0x2c
    13de:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	SET_BIT(LCD_CTR_PORT,E);   // set enable
    13e0:	a2 e3       	ldi	r26, 0x32	; 50
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	84 60       	ori	r24, 0x04	; 4
    13ec:	8c 93       	st	X, r24
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a0 e8       	ldi	r26, 0x80	; 128
    13f4:	bf e3       	ldi	r27, 0x3F	; 63
    13f6:	8f a3       	std	Y+39, r24	; 0x27
    13f8:	98 a7       	std	Y+40, r25	; 0x28
    13fa:	a9 a7       	std	Y+41, r26	; 0x29
    13fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1400:	78 a5       	ldd	r23, Y+40	; 0x28
    1402:	89 a5       	ldd	r24, Y+41	; 0x29
    1404:	9a a5       	ldd	r25, Y+42	; 0x2a
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a e7       	ldi	r20, 0x7A	; 122
    140c:	53 e4       	ldi	r21, 0x43	; 67
    140e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	8b a3       	std	Y+35, r24	; 0x23
    1418:	9c a3       	std	Y+36, r25	; 0x24
    141a:	ad a3       	std	Y+37, r26	; 0x25
    141c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    141e:	6b a1       	ldd	r22, Y+35	; 0x23
    1420:	7c a1       	ldd	r23, Y+36	; 0x24
    1422:	8d a1       	ldd	r24, Y+37	; 0x25
    1424:	9e a1       	ldd	r25, Y+38	; 0x26
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	2c f4       	brge	.+10     	; 0x1440 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9a a3       	std	Y+34, r25	; 0x22
    143c:	89 a3       	std	Y+33, r24	; 0x21
    143e:	3f c0       	rjmp	.+126    	; 0x14be <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1440:	6b a1       	ldd	r22, Y+35	; 0x23
    1442:	7c a1       	ldd	r23, Y+36	; 0x24
    1444:	8d a1       	ldd	r24, Y+37	; 0x25
    1446:	9e a1       	ldd	r25, Y+38	; 0x26
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1454:	18 16       	cp	r1, r24
    1456:	4c f5       	brge	.+82     	; 0x14aa <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	6f a1       	ldd	r22, Y+39	; 0x27
    145a:	78 a5       	ldd	r23, Y+40	; 0x28
    145c:	89 a5       	ldd	r24, Y+41	; 0x29
    145e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e2       	ldi	r20, 0x20	; 32
    1466:	51 e4       	ldi	r21, 0x41	; 65
    1468:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9a a3       	std	Y+34, r25	; 0x22
    147e:	89 a3       	std	Y+33, r24	; 0x21
    1480:	0f c0       	rjmp	.+30     	; 0x14a0 <LCD_displayCharacter+0x1d6>
    1482:	89 e1       	ldi	r24, 0x19	; 25
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	98 a3       	std	Y+32, r25	; 0x20
    1488:	8f 8f       	std	Y+31, r24	; 0x1f
    148a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    148c:	98 a1       	ldd	r25, Y+32	; 0x20
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <LCD_displayCharacter+0x1c4>
    1492:	98 a3       	std	Y+32, r25	; 0x20
    1494:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	89 a1       	ldd	r24, Y+33	; 0x21
    1498:	9a a1       	ldd	r25, Y+34	; 0x22
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	9a a3       	std	Y+34, r25	; 0x22
    149e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a0:	89 a1       	ldd	r24, Y+33	; 0x21
    14a2:	9a a1       	ldd	r25, Y+34	; 0x22
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	69 f7       	brne	.-38     	; 0x1482 <LCD_displayCharacter+0x1b8>
    14a8:	14 c0       	rjmp	.+40     	; 0x14d2 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14aa:	6b a1       	ldd	r22, Y+35	; 0x23
    14ac:	7c a1       	ldd	r23, Y+36	; 0x24
    14ae:	8d a1       	ldd	r24, Y+37	; 0x25
    14b0:	9e a1       	ldd	r25, Y+38	; 0x26
    14b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9a a3       	std	Y+34, r25	; 0x22
    14bc:	89 a3       	std	Y+33, r24	; 0x21
    14be:	89 a1       	ldd	r24, Y+33	; 0x21
    14c0:	9a a1       	ldd	r25, Y+34	; 0x22
    14c2:	9e 8f       	std	Y+30, r25	; 0x1e
    14c4:	8d 8f       	std	Y+29, r24	; 0x1d
    14c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <LCD_displayCharacter+0x200>
    14ce:	9e 8f       	std	Y+30, r25	; 0x1e
    14d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT= data;       //send command
    14d2:	eb e3       	ldi	r30, 0x3B	; 59
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	89 ad       	ldd	r24, Y+57	; 0x39
    14d8:	80 83       	st	Z, r24
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e8       	ldi	r26, 0x80	; 128
    14e0:	bf e3       	ldi	r27, 0x3F	; 63
    14e2:	89 8f       	std	Y+25, r24	; 0x19
    14e4:	9a 8f       	std	Y+26, r25	; 0x1a
    14e6:	ab 8f       	std	Y+27, r26	; 0x1b
    14e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	69 8d       	ldd	r22, Y+25	; 0x19
    14ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a e7       	ldi	r20, 0x7A	; 122
    14f8:	53 e4       	ldi	r21, 0x43	; 67
    14fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8d 8b       	std	Y+21, r24	; 0x15
    1504:	9e 8b       	std	Y+22, r25	; 0x16
    1506:	af 8b       	std	Y+23, r26	; 0x17
    1508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    150a:	6d 89       	ldd	r22, Y+21	; 0x15
    150c:	7e 89       	ldd	r23, Y+22	; 0x16
    150e:	8f 89       	ldd	r24, Y+23	; 0x17
    1510:	98 8d       	ldd	r25, Y+24	; 0x18
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <LCD_displayCharacter+0x262>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	69 8d       	ldd	r22, Y+25	; 0x19
    1546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9c 8b       	std	Y+20, r25	; 0x14
    156a:	8b 8b       	std	Y+19, r24	; 0x13
    156c:	0f c0       	rjmp	.+30     	; 0x158c <LCD_displayCharacter+0x2c2>
    156e:	89 e1       	ldi	r24, 0x19	; 25
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9a 8b       	std	Y+18, r25	; 0x12
    1574:	89 8b       	std	Y+17, r24	; 0x11
    1576:	89 89       	ldd	r24, Y+17	; 0x11
    1578:	9a 89       	ldd	r25, Y+18	; 0x12
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_displayCharacter+0x2b0>
    157e:	9a 8b       	std	Y+18, r25	; 0x12
    1580:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	8b 89       	ldd	r24, Y+19	; 0x13
    1584:	9c 89       	ldd	r25, Y+20	; 0x14
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9c 8b       	std	Y+20, r25	; 0x14
    158a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	8b 89       	ldd	r24, Y+19	; 0x13
    158e:	9c 89       	ldd	r25, Y+20	; 0x14
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <LCD_displayCharacter+0x2a4>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9c 8b       	std	Y+20, r25	; 0x14
    15a8:	8b 8b       	std	Y+19, r24	; 0x13
    15aa:	8b 89       	ldd	r24, Y+19	; 0x13
    15ac:	9c 89       	ldd	r25, Y+20	; 0x14
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
    15b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b4:	98 89       	ldd	r25, Y+16	; 0x10
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_displayCharacter+0x2ec>
    15ba:	98 8b       	std	Y+16, r25	; 0x10
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTR_PORT,E); //clear enable
    15be:	a2 e3       	ldi	r26, 0x32	; 50
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e2 e3       	ldi	r30, 0x32	; 50
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8b 7f       	andi	r24, 0xFB	; 251
    15ca:	8c 93       	st	X, r24
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e8       	ldi	r26, 0x80	; 128
    15d2:	bf e3       	ldi	r27, 0x3F	; 63
    15d4:	8b 87       	std	Y+11, r24	; 0x0b
    15d6:	9c 87       	std	Y+12, r25	; 0x0c
    15d8:	ad 87       	std	Y+13, r26	; 0x0d
    15da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15de:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4a e7       	ldi	r20, 0x7A	; 122
    15ea:	53 e4       	ldi	r21, 0x43	; 67
    15ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	8f 83       	std	Y+7, r24	; 0x07
    15f6:	98 87       	std	Y+8, r25	; 0x08
    15f8:	a9 87       	std	Y+9, r26	; 0x09
    15fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fc:	6f 81       	ldd	r22, Y+7	; 0x07
    15fe:	78 85       	ldd	r23, Y+8	; 0x08
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1610:	88 23       	and	r24, r24
    1612:	2c f4       	brge	.+10     	; 0x161e <LCD_displayCharacter+0x354>
		__ticks = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	3f c0       	rjmp	.+126    	; 0x169c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1632:	18 16       	cp	r1, r24
    1634:	4c f5       	brge	.+82     	; 0x1688 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1636:	6b 85       	ldd	r22, Y+11	; 0x0b
    1638:	7c 85       	ldd	r23, Y+12	; 0x0c
    163a:	8d 85       	ldd	r24, Y+13	; 0x0d
    163c:	9e 85       	ldd	r25, Y+14	; 0x0e
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	0f c0       	rjmp	.+30     	; 0x167e <LCD_displayCharacter+0x3b4>
    1660:	89 e1       	ldi	r24, 0x19	; 25
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9c 83       	std	Y+4, r25	; 0x04
    1666:	8b 83       	std	Y+3, r24	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_displayCharacter+0x3a2>
    1670:	9c 83       	std	Y+4, r25	; 0x04
    1672:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9e 83       	std	Y+6, r25	; 0x06
    167c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	69 f7       	brne	.-38     	; 0x1660 <LCD_displayCharacter+0x396>
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	6f 81       	ldd	r22, Y+7	; 0x07
    168a:	78 85       	ldd	r23, Y+8	; 0x08
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_displayCharacter+0x3de>
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    16b0:	e9 96       	adiw	r28, 0x39	; 57
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <LCD_displayString>:

void LCD_displayString(const char *str){
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <LCD_displayString+0x6>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	9b 83       	std	Y+3, r25	; 0x03
    16d0:	8a 83       	std	Y+2, r24	; 0x02
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <LCD_displayString+0x2e>
	uint8 i;
	while(str[i]!='\0'){
		LCD_displayCharacter(str[i]);
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	80 81       	ld	r24, Z
    16e6:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_displayCharacter>
		i++;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_displayString(const char *str){
	uint8 i;
	while(str[i]!='\0'){
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	80 81       	ld	r24, Z
    1702:	88 23       	and	r24, r24
    1704:	39 f7       	brne	.-50     	; 0x16d4 <LCD_displayString+0x12>
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <LCD_goToRowColumn>:


void LCD_goToRowColumn(uint8 row , uint8 col){
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <LCD_goToRowColumn+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <LCD_goToRowColumn+0x8>
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row){
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3d 83       	std	Y+5, r19	; 0x05
    172c:	2c 83       	std	Y+4, r18	; 0x04
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	c1 f0       	breq	.+48     	; 0x1768 <LCD_goToRowColumn+0x56>
    1738:	2c 81       	ldd	r18, Y+4	; 0x04
    173a:	3d 81       	ldd	r19, Y+5	; 0x05
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <LCD_goToRowColumn+0x3a>
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	61 f0       	breq	.+24     	; 0x1762 <LCD_goToRowColumn+0x50>
    174a:	19 c0       	rjmp	.+50     	; 0x177e <LCD_goToRowColumn+0x6c>
    174c:	2c 81       	ldd	r18, Y+4	; 0x04
    174e:	3d 81       	ldd	r19, Y+5	; 0x05
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	69 f0       	breq	.+26     	; 0x1770 <LCD_goToRowColumn+0x5e>
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	61 f0       	breq	.+24     	; 0x1778 <LCD_goToRowColumn+0x66>
    1760:	0e c0       	rjmp	.+28     	; 0x177e <LCD_goToRowColumn+0x6c>
	case 0 :
		address = col;
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	0b c0       	rjmp	.+22     	; 0x177e <LCD_goToRowColumn+0x6c>
		break;
	case 1 :
		address = col+0x40;
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	80 5c       	subi	r24, 0xC0	; 192
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	07 c0       	rjmp	.+14     	; 0x177e <LCD_goToRowColumn+0x6c>
		break;
	case 2 :
		address = col+0x10;
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	80 5f       	subi	r24, 0xF0	; 240
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	03 c0       	rjmp	.+6      	; 0x177e <LCD_goToRowColumn+0x6c>
		break;
	case 3 :
		address = col+0x50;
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	80 5b       	subi	r24, 0xB0	; 176
    177c:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_sendCommand(address | SET_CURSOR_AT_FIRST);
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	0e 94 69 07 	call	0xed2	; 0xed2 <LCD_sendCommand>

}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 col , const char *str){
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <LCD_displayStringRowColumn+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <LCD_displayStringRowColumn+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
    17a6:	5c 83       	std	Y+4, r21	; 0x04
    17a8:	4b 83       	std	Y+3, r20	; 0x03

	LCD_goToRowColumn(row , col);
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	6a 81       	ldd	r22, Y+2	; 0x02
    17ae:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_goToRowColumn>
	LCD_displayString(str);
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>

}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <LCD_intToStr>:



void LCD_intToStr(int data){
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	62 97       	sbiw	r28, 0x12	; 18
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	9a 8b       	std	Y+18, r25	; 0x12
    17de:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    17e0:	89 89       	ldd	r24, Y+17	; 0x11
    17e2:	9a 89       	ldd	r25, Y+18	; 0x12
    17e4:	9e 01       	movw	r18, r28
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	b9 01       	movw	r22, r18
    17ec:	4a e0       	ldi	r20, 0x0A	; 10
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	0e 94 76 1f 	call	0x3eec	; 0x3eec <itoa>
	LCD_displayString(buff);
    17f4:	ce 01       	movw	r24, r28
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
}
    17fc:	62 96       	adiw	r28, 0x12	; 18
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <LCD_clearScreen>:

void LCD_clearScreen(void){
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 69 07 	call	0xed2	; 0xed2 <LCD_sendCommand>
}
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <main>:
#include"keypad.h"
#include"uart.h"
#include"i2c.h"
#include"external_eeprom.h"

int main(void){
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	cc 57       	subi	r28, 0x7C	; 124
    1830:	d1 40       	sbci	r29, 0x01	; 1
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61

    /*****************************************************************/
	/*****************************************************************/

	/*  functions initialize */
	LCD_init();
    183c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_init>
	UART_init();
    1840:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <UART_init>

    /* variables */
	uint8 key , press;
    uint8 pass[9];
    uint8 i=0;
    1844:	fe 01       	movw	r30, r28
    1846:	e1 5a       	subi	r30, 0xA1	; 161
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	10 82       	st	Z, r1
    uint8 count=0;
    184c:	fe 01       	movw	r30, r28
    184e:	e2 5a       	subi	r30, 0xA2	; 162
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	10 82       	st	Z, r1
    uint8 s1, s2, s3, s4, s5, s6, s7, s8;
    uint8 lastPass[9];
    uint8 newPass[9];
    uint8 key2;
    uint8 loop = 0 ;
    1854:	fe 01       	movw	r30, r28
    1856:	ec 5a       	subi	r30, 0xAC	; 172
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	10 82       	st	Z, r1
    uint8 c = 0 ;
    185c:	fe 01       	movw	r30, r28
    185e:	ed 5a       	subi	r30, 0xAD	; 173
    1860:	fe 4f       	sbci	r31, 0xFE	; 254
    1862:	10 82       	st	Z, r1
    uint8 buzzer = 0 ;
    1864:	fe 01       	movw	r30, r28
    1866:	ee 5a       	subi	r30, 0xAE	; 174
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	10 82       	st	Z, r1

    /*****************************************************************/
    /******** receive the last password from micro-controller (2)*****/
    /*****************************************************************/
	s1=UART_reseiveByte();
    186c:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    1870:	fe 01       	movw	r30, r28
    1872:	e3 5a       	subi	r30, 0xA3	; 163
    1874:	fe 4f       	sbci	r31, 0xFE	; 254
    1876:	80 83       	st	Z, r24
    1878:	fe 01       	movw	r30, r28
    187a:	e3 5b       	subi	r30, 0xB3	; 179
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e8       	ldi	r26, 0x80	; 128
    1884:	bf e3       	ldi	r27, 0x3F	; 63
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	8e 01       	movw	r16, r28
    1890:	07 5b       	subi	r16, 0xB7	; 183
    1892:	1e 4f       	sbci	r17, 0xFE	; 254
    1894:	fe 01       	movw	r30, r28
    1896:	e3 5b       	subi	r30, 0xB3	; 179
    1898:	fe 4f       	sbci	r31, 0xFE	; 254
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a e7       	ldi	r20, 0x7A	; 122
    18a8:	53 e4       	ldi	r21, 0x43	; 67
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	f8 01       	movw	r30, r16
    18b4:	80 83       	st	Z, r24
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	a2 83       	std	Z+2, r26	; 0x02
    18ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5b       	subi	r30, 0xB7	; 183
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	44 f4       	brge	.+16     	; 0x18ea <main+0xc8>
		__ticks = 1;
    18da:	fe 01       	movw	r30, r28
    18dc:	e9 5b       	subi	r30, 0xB9	; 185
    18de:	fe 4f       	sbci	r31, 0xFE	; 254
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	64 c0       	rjmp	.+200    	; 0x19b2 <main+0x190>
	else if (__tmp > 65535)
    18ea:	fe 01       	movw	r30, r28
    18ec:	e7 5b       	subi	r30, 0xB7	; 183
    18ee:	fe 4f       	sbci	r31, 0xFE	; 254
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	0c f0       	brlt	.+2      	; 0x190a <main+0xe8>
    1908:	43 c0       	rjmp	.+134    	; 0x1990 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	fe 01       	movw	r30, r28
    190c:	e3 5b       	subi	r30, 0xB3	; 179
    190e:	fe 4f       	sbci	r31, 0xFE	; 254
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8e 01       	movw	r16, r28
    192a:	09 5b       	subi	r16, 0xB9	; 185
    192c:	1e 4f       	sbci	r17, 0xFE	; 254
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	1f c0       	rjmp	.+62     	; 0x1980 <main+0x15e>
    1942:	fe 01       	movw	r30, r28
    1944:	eb 5b       	subi	r30, 0xBB	; 187
    1946:	fe 4f       	sbci	r31, 0xFE	; 254
    1948:	89 e1       	ldi	r24, 0x19	; 25
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	fe 01       	movw	r30, r28
    1952:	eb 5b       	subi	r30, 0xBB	; 187
    1954:	fe 4f       	sbci	r31, 0xFE	; 254
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0x138>
    195e:	fe 01       	movw	r30, r28
    1960:	eb 5b       	subi	r30, 0xBB	; 187
    1962:	fe 4f       	sbci	r31, 0xFE	; 254
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	de 01       	movw	r26, r28
    196a:	a9 5b       	subi	r26, 0xB9	; 185
    196c:	be 4f       	sbci	r27, 0xFE	; 254
    196e:	fe 01       	movw	r30, r28
    1970:	e9 5b       	subi	r30, 0xB9	; 185
    1972:	fe 4f       	sbci	r31, 0xFE	; 254
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	11 96       	adiw	r26, 0x01	; 1
    197c:	9c 93       	st	X, r25
    197e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	fe 01       	movw	r30, r28
    1982:	e9 5b       	subi	r30, 0xB9	; 185
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	80 81       	ld	r24, Z
    1988:	91 81       	ldd	r25, Z+1	; 0x01
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	d1 f6       	brne	.-76     	; 0x1942 <main+0x120>
    198e:	27 c0       	rjmp	.+78     	; 0x19de <main+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1990:	8e 01       	movw	r16, r28
    1992:	09 5b       	subi	r16, 0xB9	; 185
    1994:	1e 4f       	sbci	r17, 0xFE	; 254
    1996:	fe 01       	movw	r30, r28
    1998:	e7 5b       	subi	r30, 0xB7	; 183
    199a:	fe 4f       	sbci	r31, 0xFE	; 254
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	de 01       	movw	r26, r28
    19b4:	ad 5b       	subi	r26, 0xBD	; 189
    19b6:	be 4f       	sbci	r27, 0xFE	; 254
    19b8:	fe 01       	movw	r30, r28
    19ba:	e9 5b       	subi	r30, 0xB9	; 185
    19bc:	fe 4f       	sbci	r31, 0xFE	; 254
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	8d 93       	st	X+, r24
    19c4:	9c 93       	st	X, r25
    19c6:	fe 01       	movw	r30, r28
    19c8:	ed 5b       	subi	r30, 0xBD	; 189
    19ca:	fe 4f       	sbci	r31, 0xFE	; 254
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <main+0x1ae>
    19d4:	fe 01       	movw	r30, r28
    19d6:	ed 5b       	subi	r30, 0xBD	; 189
    19d8:	fe 4f       	sbci	r31, 0xFE	; 254
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
	_delay_ms(1);
	s2=UART_reseiveByte();
    19de:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    19e2:	fe 01       	movw	r30, r28
    19e4:	e4 5a       	subi	r30, 0xA4	; 164
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	80 83       	st	Z, r24
    19ea:	fe 01       	movw	r30, r28
    19ec:	e1 5c       	subi	r30, 0xC1	; 193
    19ee:	fe 4f       	sbci	r31, 0xFE	; 254
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e8       	ldi	r26, 0x80	; 128
    19f6:	bf e3       	ldi	r27, 0x3F	; 63
    19f8:	80 83       	st	Z, r24
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	a2 83       	std	Z+2, r26	; 0x02
    19fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	8e 01       	movw	r16, r28
    1a02:	05 5c       	subi	r16, 0xC5	; 197
    1a04:	1e 4f       	sbci	r17, 0xFE	; 254
    1a06:	fe 01       	movw	r30, r28
    1a08:	e1 5c       	subi	r30, 0xC1	; 193
    1a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	53 e4       	ldi	r21, 0x43	; 67
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e5 5c       	subi	r30, 0xC5	; 197
    1a32:	fe 4f       	sbci	r31, 0xFE	; 254
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	44 f4       	brge	.+16     	; 0x1a5c <main+0x23a>
		__ticks = 1;
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e7 5c       	subi	r30, 0xC7	; 199
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	64 c0       	rjmp	.+200    	; 0x1b24 <main+0x302>
	else if (__tmp > 65535)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e5 5c       	subi	r30, 0xC5	; 197
    1a60:	fe 4f       	sbci	r31, 0xFE	; 254
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	0c f0       	brlt	.+2      	; 0x1a7c <main+0x25a>
    1a7a:	43 c0       	rjmp	.+134    	; 0x1b02 <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e1 5c       	subi	r30, 0xC1	; 193
    1a80:	fe 4f       	sbci	r31, 0xFE	; 254
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8e 01       	movw	r16, r28
    1a9c:	07 5c       	subi	r16, 0xC7	; 199
    1a9e:	1e 4f       	sbci	r17, 0xFE	; 254
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	f8 01       	movw	r30, r16
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	1f c0       	rjmp	.+62     	; 0x1af2 <main+0x2d0>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5c       	subi	r30, 0xC9	; 201
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	89 e1       	ldi	r24, 0x19	; 25
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e9 5c       	subi	r30, 0xC9	; 201
    1ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <main+0x2aa>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e9 5c       	subi	r30, 0xC9	; 201
    1ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	de 01       	movw	r26, r28
    1adc:	a7 5c       	subi	r26, 0xC7	; 199
    1ade:	be 4f       	sbci	r27, 0xFE	; 254
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e7 5c       	subi	r30, 0xC7	; 199
    1ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	fe 01       	movw	r30, r28
    1af4:	e7 5c       	subi	r30, 0xC7	; 199
    1af6:	fe 4f       	sbci	r31, 0xFE	; 254
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	d1 f6       	brne	.-76     	; 0x1ab4 <main+0x292>
    1b00:	27 c0       	rjmp	.+78     	; 0x1b50 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	8e 01       	movw	r16, r28
    1b04:	07 5c       	subi	r16, 0xC7	; 199
    1b06:	1e 4f       	sbci	r17, 0xFE	; 254
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e5 5c       	subi	r30, 0xC5	; 197
    1b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	de 01       	movw	r26, r28
    1b26:	ab 5c       	subi	r26, 0xCB	; 203
    1b28:	be 4f       	sbci	r27, 0xFE	; 254
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e7 5c       	subi	r30, 0xC7	; 199
    1b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	8d 93       	st	X+, r24
    1b36:	9c 93       	st	X, r25
    1b38:	fe 01       	movw	r30, r28
    1b3a:	eb 5c       	subi	r30, 0xCB	; 203
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <main+0x320>
    1b46:	fe 01       	movw	r30, r28
    1b48:	eb 5c       	subi	r30, 0xCB	; 203
    1b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
	_delay_ms(1);
	s3=UART_reseiveByte();
    1b50:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    1b54:	fe 01       	movw	r30, r28
    1b56:	e5 5a       	subi	r30, 0xA5	; 165
    1b58:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5a:	80 83       	st	Z, r24
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ef 5c       	subi	r30, 0xCF	; 207
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e8       	ldi	r26, 0x80	; 128
    1b68:	bf e3       	ldi	r27, 0x3F	; 63
    1b6a:	80 83       	st	Z, r24
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	a2 83       	std	Z+2, r26	; 0x02
    1b70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	8e 01       	movw	r16, r28
    1b74:	03 5d       	subi	r16, 0xD3	; 211
    1b76:	1e 4f       	sbci	r17, 0xFE	; 254
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ef 5c       	subi	r30, 0xCF	; 207
    1b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	53 e4       	ldi	r21, 0x43	; 67
    1b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	f8 01       	movw	r30, r16
    1b98:	80 83       	st	Z, r24
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	a2 83       	std	Z+2, r26	; 0x02
    1b9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e3 5d       	subi	r30, 0xD3	; 211
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	44 f4       	brge	.+16     	; 0x1bce <main+0x3ac>
		__ticks = 1;
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e5 5d       	subi	r30, 0xD5	; 213
    1bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	64 c0       	rjmp	.+200    	; 0x1c96 <main+0x474>
	else if (__tmp > 65535)
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e3 5d       	subi	r30, 0xD3	; 211
    1bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	0c f0       	brlt	.+2      	; 0x1bee <main+0x3cc>
    1bec:	43 c0       	rjmp	.+134    	; 0x1c74 <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ef 5c       	subi	r30, 0xCF	; 207
    1bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8e 01       	movw	r16, r28
    1c0e:	05 5d       	subi	r16, 0xD5	; 213
    1c10:	1e 4f       	sbci	r17, 0xFE	; 254
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	f8 01       	movw	r30, r16
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    1c24:	1f c0       	rjmp	.+62     	; 0x1c64 <main+0x442>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e7 5d       	subi	r30, 0xD7	; 215
    1c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2c:	89 e1       	ldi	r24, 0x19	; 25
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	fe 01       	movw	r30, r28
    1c36:	e7 5d       	subi	r30, 0xD7	; 215
    1c38:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <main+0x41c>
    1c42:	fe 01       	movw	r30, r28
    1c44:	e7 5d       	subi	r30, 0xD7	; 215
    1c46:	fe 4f       	sbci	r31, 0xFE	; 254
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	de 01       	movw	r26, r28
    1c4e:	a5 5d       	subi	r26, 0xD5	; 213
    1c50:	be 4f       	sbci	r27, 0xFE	; 254
    1c52:	fe 01       	movw	r30, r28
    1c54:	e5 5d       	subi	r30, 0xD5	; 213
    1c56:	fe 4f       	sbci	r31, 0xFE	; 254
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	11 96       	adiw	r26, 0x01	; 1
    1c60:	9c 93       	st	X, r25
    1c62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	fe 01       	movw	r30, r28
    1c66:	e5 5d       	subi	r30, 0xD5	; 213
    1c68:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6a:	80 81       	ld	r24, Z
    1c6c:	91 81       	ldd	r25, Z+1	; 0x01
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	d1 f6       	brne	.-76     	; 0x1c26 <main+0x404>
    1c72:	27 c0       	rjmp	.+78     	; 0x1cc2 <main+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	8e 01       	movw	r16, r28
    1c76:	05 5d       	subi	r16, 0xD5	; 213
    1c78:	1e 4f       	sbci	r17, 0xFE	; 254
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e3 5d       	subi	r30, 0xD3	; 211
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	f8 01       	movw	r30, r16
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	de 01       	movw	r26, r28
    1c98:	a9 5d       	subi	r26, 0xD9	; 217
    1c9a:	be 4f       	sbci	r27, 0xFE	; 254
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e5 5d       	subi	r30, 0xD5	; 213
    1ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	8d 93       	st	X+, r24
    1ca8:	9c 93       	st	X, r25
    1caa:	fe 01       	movw	r30, r28
    1cac:	e9 5d       	subi	r30, 0xD9	; 217
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <main+0x492>
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e9 5d       	subi	r30, 0xD9	; 217
    1cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	80 83       	st	Z, r24
	_delay_ms(1);
	s4=UART_reseiveByte();
    1cc2:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e6 5a       	subi	r30, 0xA6	; 166
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	80 83       	st	Z, r24
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ed 5d       	subi	r30, 0xDD	; 221
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 e8       	ldi	r26, 0x80	; 128
    1cda:	bf e3       	ldi	r27, 0x3F	; 63
    1cdc:	80 83       	st	Z, r24
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	a2 83       	std	Z+2, r26	; 0x02
    1ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	01 5e       	subi	r16, 0xE1	; 225
    1ce8:	1e 4f       	sbci	r17, 0xFE	; 254
    1cea:	fe 01       	movw	r30, r28
    1cec:	ed 5d       	subi	r30, 0xDD	; 221
    1cee:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a e7       	ldi	r20, 0x7A	; 122
    1cfe:	53 e4       	ldi	r21, 0x43	; 67
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	f8 01       	movw	r30, r16
    1d0a:	80 83       	st	Z, r24
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	a2 83       	std	Z+2, r26	; 0x02
    1d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d12:	fe 01       	movw	r30, r28
    1d14:	e1 5e       	subi	r30, 0xE1	; 225
    1d16:	fe 4f       	sbci	r31, 0xFE	; 254
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	44 f4       	brge	.+16     	; 0x1d40 <main+0x51e>
		__ticks = 1;
    1d30:	fe 01       	movw	r30, r28
    1d32:	e3 5e       	subi	r30, 0xE3	; 227
    1d34:	fe 4f       	sbci	r31, 0xFE	; 254
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
    1d3e:	64 c0       	rjmp	.+200    	; 0x1e08 <main+0x5e6>
	else if (__tmp > 65535)
    1d40:	fe 01       	movw	r30, r28
    1d42:	e1 5e       	subi	r30, 0xE1	; 225
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	0c f0       	brlt	.+2      	; 0x1d60 <main+0x53e>
    1d5e:	43 c0       	rjmp	.+134    	; 0x1de6 <main+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5d       	subi	r30, 0xDD	; 221
    1d64:	fe 4f       	sbci	r31, 0xFE	; 254
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8e 01       	movw	r16, r28
    1d80:	03 5e       	subi	r16, 0xE3	; 227
    1d82:	1e 4f       	sbci	r17, 0xFE	; 254
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	f8 01       	movw	r30, r16
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
    1d96:	1f c0       	rjmp	.+62     	; 0x1dd6 <main+0x5b4>
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e5 5e       	subi	r30, 0xE5	; 229
    1d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9e:	89 e1       	ldi	r24, 0x19	; 25
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	fe 01       	movw	r30, r28
    1da8:	e5 5e       	subi	r30, 0xE5	; 229
    1daa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <main+0x58e>
    1db4:	fe 01       	movw	r30, r28
    1db6:	e5 5e       	subi	r30, 0xE5	; 229
    1db8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	de 01       	movw	r26, r28
    1dc0:	a3 5e       	subi	r26, 0xE3	; 227
    1dc2:	be 4f       	sbci	r27, 0xFE	; 254
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e3 5e       	subi	r30, 0xE3	; 227
    1dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	11 96       	adiw	r26, 0x01	; 1
    1dd2:	9c 93       	st	X, r25
    1dd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e3 5e       	subi	r30, 0xE3	; 227
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	d1 f6       	brne	.-76     	; 0x1d98 <main+0x576>
    1de4:	27 c0       	rjmp	.+78     	; 0x1e34 <main+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	8e 01       	movw	r16, r28
    1de8:	03 5e       	subi	r16, 0xE3	; 227
    1dea:	1e 4f       	sbci	r17, 0xFE	; 254
    1dec:	fe 01       	movw	r30, r28
    1dee:	e1 5e       	subi	r30, 0xE1	; 225
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	f8 01       	movw	r30, r16
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
    1e08:	de 01       	movw	r26, r28
    1e0a:	a7 5e       	subi	r26, 0xE7	; 231
    1e0c:	be 4f       	sbci	r27, 0xFE	; 254
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e3 5e       	subi	r30, 0xE3	; 227
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	8d 93       	st	X+, r24
    1e1a:	9c 93       	st	X, r25
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e7 5e       	subi	r30, 0xE7	; 231
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <main+0x604>
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e7 5e       	subi	r30, 0xE7	; 231
    1e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
	_delay_ms(1);
	s5=UART_reseiveByte();
    1e34:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e7 5a       	subi	r30, 0xA7	; 167
    1e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3e:	80 83       	st	Z, r24
    1e40:	fe 01       	movw	r30, r28
    1e42:	eb 5e       	subi	r30, 0xEB	; 235
    1e44:	fe 4f       	sbci	r31, 0xFE	; 254
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e8       	ldi	r26, 0x80	; 128
    1e4c:	bf e3       	ldi	r27, 0x3F	; 63
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	8e 01       	movw	r16, r28
    1e58:	0f 5e       	subi	r16, 0xEF	; 239
    1e5a:	1e 4f       	sbci	r17, 0xFE	; 254
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	eb 5e       	subi	r30, 0xEB	; 235
    1e60:	fe 4f       	sbci	r31, 0xFE	; 254
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a e7       	ldi	r20, 0x7A	; 122
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	80 83       	st	Z, r24
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	a2 83       	std	Z+2, r26	; 0x02
    1e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e84:	fe 01       	movw	r30, r28
    1e86:	ef 5e       	subi	r30, 0xEF	; 239
    1e88:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	5f e3       	ldi	r21, 0x3F	; 63
    1e9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e9e:	88 23       	and	r24, r24
    1ea0:	44 f4       	brge	.+16     	; 0x1eb2 <main+0x690>
		__ticks = 1;
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e1 5f       	subi	r30, 0xF1	; 241
    1ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	64 c0       	rjmp	.+200    	; 0x1f7a <main+0x758>
	else if (__tmp > 65535)
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ef 5e       	subi	r30, 0xEF	; 239
    1eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	0c f0       	brlt	.+2      	; 0x1ed2 <main+0x6b0>
    1ed0:	43 c0       	rjmp	.+134    	; 0x1f58 <main+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	eb 5e       	subi	r30, 0xEB	; 235
    1ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8e 01       	movw	r16, r28
    1ef2:	01 5f       	subi	r16, 0xF1	; 241
    1ef4:	1e 4f       	sbci	r17, 0xFE	; 254
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	f8 01       	movw	r30, r16
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
    1f08:	1f c0       	rjmp	.+62     	; 0x1f48 <main+0x726>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e3 5f       	subi	r30, 0xF3	; 243
    1f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e3 5f       	subi	r30, 0xF3	; 243
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <main+0x700>
    1f26:	fe 01       	movw	r30, r28
    1f28:	e3 5f       	subi	r30, 0xF3	; 243
    1f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f30:	de 01       	movw	r26, r28
    1f32:	a1 5f       	subi	r26, 0xF1	; 241
    1f34:	be 4f       	sbci	r27, 0xFE	; 254
    1f36:	fe 01       	movw	r30, r28
    1f38:	e1 5f       	subi	r30, 0xF1	; 241
    1f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	11 96       	adiw	r26, 0x01	; 1
    1f44:	9c 93       	st	X, r25
    1f46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e1 5f       	subi	r30, 0xF1	; 241
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	d1 f6       	brne	.-76     	; 0x1f0a <main+0x6e8>
    1f56:	27 c0       	rjmp	.+78     	; 0x1fa6 <main+0x784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	8e 01       	movw	r16, r28
    1f5a:	01 5f       	subi	r16, 0xF1	; 241
    1f5c:	1e 4f       	sbci	r17, 0xFE	; 254
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ef 5e       	subi	r30, 0xEF	; 239
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	f8 01       	movw	r30, r16
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	de 01       	movw	r26, r28
    1f7c:	a5 5f       	subi	r26, 0xF5	; 245
    1f7e:	be 4f       	sbci	r27, 0xFE	; 254
    1f80:	fe 01       	movw	r30, r28
    1f82:	e1 5f       	subi	r30, 0xF1	; 241
    1f84:	fe 4f       	sbci	r31, 0xFE	; 254
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	8d 93       	st	X+, r24
    1f8c:	9c 93       	st	X, r25
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e5 5f       	subi	r30, 0xF5	; 245
    1f92:	fe 4f       	sbci	r31, 0xFE	; 254
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <main+0x776>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e5 5f       	subi	r30, 0xF5	; 245
    1fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
	_delay_ms(1);
	s6=UART_reseiveByte();
    1fa6:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    1faa:	fe 01       	movw	r30, r28
    1fac:	e8 5a       	subi	r30, 0xA8	; 168
    1fae:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb0:	80 83       	st	Z, r24
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e9 5f       	subi	r30, 0xF9	; 249
    1fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	80 83       	st	Z, r24
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	a2 83       	std	Z+2, r26	; 0x02
    1fc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	8e 01       	movw	r16, r28
    1fca:	0d 5f       	subi	r16, 0xFD	; 253
    1fcc:	1e 4f       	sbci	r17, 0xFE	; 254
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e9 5f       	subi	r30, 0xF9	; 249
    1fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a e7       	ldi	r20, 0x7A	; 122
    1fe2:	53 e4       	ldi	r21, 0x43	; 67
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	a2 83       	std	Z+2, r26	; 0x02
    1ff4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ed 5f       	subi	r30, 0xFD	; 253
    1ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	44 f4       	brge	.+16     	; 0x2024 <main+0x802>
		__ticks = 1;
    2014:	fe 01       	movw	r30, r28
    2016:	ef 5f       	subi	r30, 0xFF	; 255
    2018:	fe 4f       	sbci	r31, 0xFE	; 254
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
    2022:	64 c0       	rjmp	.+200    	; 0x20ec <main+0x8ca>
	else if (__tmp > 65535)
    2024:	fe 01       	movw	r30, r28
    2026:	ed 5f       	subi	r30, 0xFD	; 253
    2028:	fe 4f       	sbci	r31, 0xFE	; 254
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	0c f0       	brlt	.+2      	; 0x2044 <main+0x822>
    2042:	43 c0       	rjmp	.+134    	; 0x20ca <main+0x8a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	fe 01       	movw	r30, r28
    2046:	e9 5f       	subi	r30, 0xF9	; 249
    2048:	fe 4f       	sbci	r31, 0xFE	; 254
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8e 01       	movw	r16, r28
    2064:	0f 5f       	subi	r16, 0xFF	; 255
    2066:	1e 4f       	sbci	r17, 0xFE	; 254
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	f8 01       	movw	r30, r16
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	1f c0       	rjmp	.+62     	; 0x20ba <main+0x898>
    207c:	fe 01       	movw	r30, r28
    207e:	e1 50       	subi	r30, 0x01	; 1
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
    208a:	fe 01       	movw	r30, r28
    208c:	e1 50       	subi	r30, 0x01	; 1
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <main+0x872>
    2098:	fe 01       	movw	r30, r28
    209a:	e1 50       	subi	r30, 0x01	; 1
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	de 01       	movw	r26, r28
    20a4:	af 5f       	subi	r26, 0xFF	; 255
    20a6:	be 4f       	sbci	r27, 0xFE	; 254
    20a8:	fe 01       	movw	r30, r28
    20aa:	ef 5f       	subi	r30, 0xFF	; 255
    20ac:	fe 4f       	sbci	r31, 0xFE	; 254
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	fe 01       	movw	r30, r28
    20bc:	ef 5f       	subi	r30, 0xFF	; 255
    20be:	fe 4f       	sbci	r31, 0xFE	; 254
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	d1 f6       	brne	.-76     	; 0x207c <main+0x85a>
    20c8:	27 c0       	rjmp	.+78     	; 0x2118 <main+0x8f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	8e 01       	movw	r16, r28
    20cc:	0f 5f       	subi	r16, 0xFF	; 255
    20ce:	1e 4f       	sbci	r17, 0xFE	; 254
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 5f       	subi	r30, 0xFD	; 253
    20d4:	fe 4f       	sbci	r31, 0xFE	; 254
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	f8 01       	movw	r30, r16
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
    20ec:	de 01       	movw	r26, r28
    20ee:	a3 50       	subi	r26, 0x03	; 3
    20f0:	bf 4f       	sbci	r27, 0xFF	; 255
    20f2:	fe 01       	movw	r30, r28
    20f4:	ef 5f       	subi	r30, 0xFF	; 255
    20f6:	fe 4f       	sbci	r31, 0xFE	; 254
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	8d 93       	st	X+, r24
    20fe:	9c 93       	st	X, r25
    2100:	fe 01       	movw	r30, r28
    2102:	e3 50       	subi	r30, 0x03	; 3
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <main+0x8e8>
    210e:	fe 01       	movw	r30, r28
    2110:	e3 50       	subi	r30, 0x03	; 3
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
	_delay_ms(1);
	s7=UART_reseiveByte();
    2118:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    211c:	fe 01       	movw	r30, r28
    211e:	e9 5a       	subi	r30, 0xA9	; 169
    2120:	fe 4f       	sbci	r31, 0xFE	; 254
    2122:	80 83       	st	Z, r24
    2124:	fe 01       	movw	r30, r28
    2126:	e7 50       	subi	r30, 0x07	; 7
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e8       	ldi	r26, 0x80	; 128
    2130:	bf e3       	ldi	r27, 0x3F	; 63
    2132:	80 83       	st	Z, r24
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	a2 83       	std	Z+2, r26	; 0x02
    2138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	8e 01       	movw	r16, r28
    213c:	0b 50       	subi	r16, 0x0B	; 11
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	fe 01       	movw	r30, r28
    2142:	e7 50       	subi	r30, 0x07	; 7
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	53 e4       	ldi	r21, 0x43	; 67
    2156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	80 83       	st	Z, r24
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	a2 83       	std	Z+2, r26	; 0x02
    2166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2168:	fe 01       	movw	r30, r28
    216a:	eb 50       	subi	r30, 0x0B	; 11
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	44 f4       	brge	.+16     	; 0x2196 <main+0x974>
		__ticks = 1;
    2186:	fe 01       	movw	r30, r28
    2188:	ed 50       	subi	r30, 0x0D	; 13
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	64 c0       	rjmp	.+200    	; 0x225e <main+0xa3c>
	else if (__tmp > 65535)
    2196:	fe 01       	movw	r30, r28
    2198:	eb 50       	subi	r30, 0x0B	; 11
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	0c f0       	brlt	.+2      	; 0x21b6 <main+0x994>
    21b4:	43 c0       	rjmp	.+134    	; 0x223c <main+0xa1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	fe 01       	movw	r30, r28
    21b8:	e7 50       	subi	r30, 0x07	; 7
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8e 01       	movw	r16, r28
    21d6:	0d 50       	subi	r16, 0x0D	; 13
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	1f c0       	rjmp	.+62     	; 0x222c <main+0xa0a>
    21ee:	fe 01       	movw	r30, r28
    21f0:	ef 50       	subi	r30, 0x0F	; 15
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	89 e1       	ldi	r24, 0x19	; 25
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	fe 01       	movw	r30, r28
    21fe:	ef 50       	subi	r30, 0x0F	; 15
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <main+0x9e4>
    220a:	fe 01       	movw	r30, r28
    220c:	ef 50       	subi	r30, 0x0F	; 15
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	de 01       	movw	r26, r28
    2216:	ad 50       	subi	r26, 0x0D	; 13
    2218:	bf 4f       	sbci	r27, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	ed 50       	subi	r30, 0x0D	; 13
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	9c 93       	st	X, r25
    222a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	fe 01       	movw	r30, r28
    222e:	ed 50       	subi	r30, 0x0D	; 13
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	d1 f6       	brne	.-76     	; 0x21ee <main+0x9cc>
    223a:	27 c0       	rjmp	.+78     	; 0x228a <main+0xa68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	8e 01       	movw	r16, r28
    223e:	0d 50       	subi	r16, 0x0D	; 13
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	fe 01       	movw	r30, r28
    2244:	eb 50       	subi	r30, 0x0B	; 11
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	de 01       	movw	r26, r28
    2260:	a1 51       	subi	r26, 0x11	; 17
    2262:	bf 4f       	sbci	r27, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	ed 50       	subi	r30, 0x0D	; 13
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	8d 93       	st	X+, r24
    2270:	9c 93       	st	X, r25
    2272:	fe 01       	movw	r30, r28
    2274:	e1 51       	subi	r30, 0x11	; 17
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0xa5a>
    2280:	fe 01       	movw	r30, r28
    2282:	e1 51       	subi	r30, 0x11	; 17
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
	_delay_ms(1);
	s8=UART_reseiveByte();
    228a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    228e:	fe 01       	movw	r30, r28
    2290:	ea 5a       	subi	r30, 0xAA	; 170
    2292:	fe 4f       	sbci	r31, 0xFE	; 254
    2294:	80 83       	st	Z, r24
    2296:	fe 01       	movw	r30, r28
    2298:	e5 51       	subi	r30, 0x15	; 21
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e8       	ldi	r26, 0x80	; 128
    22a2:	bf e3       	ldi	r27, 0x3F	; 63
    22a4:	80 83       	st	Z, r24
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	a2 83       	std	Z+2, r26	; 0x02
    22aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	8e 01       	movw	r16, r28
    22ae:	09 51       	subi	r16, 0x19	; 25
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	fe 01       	movw	r30, r28
    22b4:	e5 51       	subi	r30, 0x15	; 21
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	60 81       	ld	r22, Z
    22ba:	71 81       	ldd	r23, Z+1	; 0x01
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	93 81       	ldd	r25, Z+3	; 0x03
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a e7       	ldi	r20, 0x7A	; 122
    22c6:	53 e4       	ldi	r21, 0x43	; 67
    22c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	f8 01       	movw	r30, r16
    22d2:	80 83       	st	Z, r24
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	a2 83       	std	Z+2, r26	; 0x02
    22d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22da:	fe 01       	movw	r30, r28
    22dc:	e9 51       	subi	r30, 0x19	; 25
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	44 f4       	brge	.+16     	; 0x2308 <main+0xae6>
		__ticks = 1;
    22f8:	fe 01       	movw	r30, r28
    22fa:	eb 51       	subi	r30, 0x1B	; 27
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
    2306:	64 c0       	rjmp	.+200    	; 0x23d0 <main+0xbae>
	else if (__tmp > 65535)
    2308:	fe 01       	movw	r30, r28
    230a:	e9 51       	subi	r30, 0x19	; 25
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	0c f0       	brlt	.+2      	; 0x2328 <main+0xb06>
    2326:	43 c0       	rjmp	.+134    	; 0x23ae <main+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2328:	fe 01       	movw	r30, r28
    232a:	e5 51       	subi	r30, 0x15	; 21
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	60 81       	ld	r22, Z
    2330:	71 81       	ldd	r23, Z+1	; 0x01
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8e 01       	movw	r16, r28
    2348:	0b 51       	subi	r16, 0x1B	; 27
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	f8 01       	movw	r30, r16
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
    235e:	1f c0       	rjmp	.+62     	; 0x239e <main+0xb7c>
    2360:	fe 01       	movw	r30, r28
    2362:	ed 51       	subi	r30, 0x1D	; 29
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	89 e1       	ldi	r24, 0x19	; 25
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    236e:	fe 01       	movw	r30, r28
    2370:	ed 51       	subi	r30, 0x1D	; 29
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <main+0xb56>
    237c:	fe 01       	movw	r30, r28
    237e:	ed 51       	subi	r30, 0x1D	; 29
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	de 01       	movw	r26, r28
    2388:	ab 51       	subi	r26, 0x1B	; 27
    238a:	bf 4f       	sbci	r27, 0xFF	; 255
    238c:	fe 01       	movw	r30, r28
    238e:	eb 51       	subi	r30, 0x1B	; 27
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	91 81       	ldd	r25, Z+1	; 0x01
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	11 96       	adiw	r26, 0x01	; 1
    239a:	9c 93       	st	X, r25
    239c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	fe 01       	movw	r30, r28
    23a0:	eb 51       	subi	r30, 0x1B	; 27
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	d1 f6       	brne	.-76     	; 0x2360 <main+0xb3e>
    23ac:	27 c0       	rjmp	.+78     	; 0x23fc <main+0xbda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	8e 01       	movw	r16, r28
    23b0:	0b 51       	subi	r16, 0x1B	; 27
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	fe 01       	movw	r30, r28
    23b6:	e9 51       	subi	r30, 0x19	; 25
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	f8 01       	movw	r30, r16
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    23d0:	de 01       	movw	r26, r28
    23d2:	af 51       	subi	r26, 0x1F	; 31
    23d4:	bf 4f       	sbci	r27, 0xFF	; 255
    23d6:	fe 01       	movw	r30, r28
    23d8:	eb 51       	subi	r30, 0x1B	; 27
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	8d 93       	st	X+, r24
    23e2:	9c 93       	st	X, r25
    23e4:	fe 01       	movw	r30, r28
    23e6:	ef 51       	subi	r30, 0x1F	; 31
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <main+0xbcc>
    23f2:	fe 01       	movw	r30, r28
    23f4:	ef 51       	subi	r30, 0x1F	; 31
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
	_delay_ms(1);

	/******************************/
	/* put the last pass in array */
	/******************************/
	lastPass[0]=s1;
    23fc:	de 01       	movw	r26, r28
    23fe:	a5 59       	subi	r26, 0x95	; 149
    2400:	be 4f       	sbci	r27, 0xFE	; 254
    2402:	fe 01       	movw	r30, r28
    2404:	e3 5a       	subi	r30, 0xA3	; 163
    2406:	fe 4f       	sbci	r31, 0xFE	; 254
    2408:	80 81       	ld	r24, Z
    240a:	8c 93       	st	X, r24
	lastPass[1]=s2;
    240c:	de 01       	movw	r26, r28
    240e:	a5 59       	subi	r26, 0x95	; 149
    2410:	be 4f       	sbci	r27, 0xFE	; 254
    2412:	fe 01       	movw	r30, r28
    2414:	e4 5a       	subi	r30, 0xA4	; 164
    2416:	fe 4f       	sbci	r31, 0xFE	; 254
    2418:	80 81       	ld	r24, Z
    241a:	11 96       	adiw	r26, 0x01	; 1
    241c:	8c 93       	st	X, r24
	lastPass[2]=s3;
    241e:	de 01       	movw	r26, r28
    2420:	a5 59       	subi	r26, 0x95	; 149
    2422:	be 4f       	sbci	r27, 0xFE	; 254
    2424:	fe 01       	movw	r30, r28
    2426:	e5 5a       	subi	r30, 0xA5	; 165
    2428:	fe 4f       	sbci	r31, 0xFE	; 254
    242a:	80 81       	ld	r24, Z
    242c:	12 96       	adiw	r26, 0x02	; 2
    242e:	8c 93       	st	X, r24
	lastPass[3]=s4;
    2430:	de 01       	movw	r26, r28
    2432:	a5 59       	subi	r26, 0x95	; 149
    2434:	be 4f       	sbci	r27, 0xFE	; 254
    2436:	fe 01       	movw	r30, r28
    2438:	e6 5a       	subi	r30, 0xA6	; 166
    243a:	fe 4f       	sbci	r31, 0xFE	; 254
    243c:	80 81       	ld	r24, Z
    243e:	13 96       	adiw	r26, 0x03	; 3
    2440:	8c 93       	st	X, r24
	lastPass[4]=s5;
    2442:	de 01       	movw	r26, r28
    2444:	a5 59       	subi	r26, 0x95	; 149
    2446:	be 4f       	sbci	r27, 0xFE	; 254
    2448:	fe 01       	movw	r30, r28
    244a:	e7 5a       	subi	r30, 0xA7	; 167
    244c:	fe 4f       	sbci	r31, 0xFE	; 254
    244e:	80 81       	ld	r24, Z
    2450:	14 96       	adiw	r26, 0x04	; 4
    2452:	8c 93       	st	X, r24
	lastPass[5]=s6;
    2454:	de 01       	movw	r26, r28
    2456:	a5 59       	subi	r26, 0x95	; 149
    2458:	be 4f       	sbci	r27, 0xFE	; 254
    245a:	fe 01       	movw	r30, r28
    245c:	e8 5a       	subi	r30, 0xA8	; 168
    245e:	fe 4f       	sbci	r31, 0xFE	; 254
    2460:	80 81       	ld	r24, Z
    2462:	15 96       	adiw	r26, 0x05	; 5
    2464:	8c 93       	st	X, r24
	lastPass[6]=s7;
    2466:	de 01       	movw	r26, r28
    2468:	a5 59       	subi	r26, 0x95	; 149
    246a:	be 4f       	sbci	r27, 0xFE	; 254
    246c:	fe 01       	movw	r30, r28
    246e:	e9 5a       	subi	r30, 0xA9	; 169
    2470:	fe 4f       	sbci	r31, 0xFE	; 254
    2472:	80 81       	ld	r24, Z
    2474:	16 96       	adiw	r26, 0x06	; 6
    2476:	8c 93       	st	X, r24
	lastPass[7]=s8;
    2478:	de 01       	movw	r26, r28
    247a:	a5 59       	subi	r26, 0x95	; 149
    247c:	be 4f       	sbci	r27, 0xFE	; 254
    247e:	fe 01       	movw	r30, r28
    2480:	ea 5a       	subi	r30, 0xAA	; 170
    2482:	fe 4f       	sbci	r31, 0xFE	; 254
    2484:	80 81       	ld	r24, Z
    2486:	17 96       	adiw	r26, 0x07	; 7
    2488:	8c 93       	st	X, r24

	LCD_displayString("power on .... ");
    248a:	80 e6       	ldi	r24, 0x60	; 96
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
    2492:	fe 01       	movw	r30, r28
    2494:	e3 52       	subi	r30, 0x23	; 35
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	aa e7       	ldi	r26, 0x7A	; 122
    249e:	b4 e4       	ldi	r27, 0x44	; 68
    24a0:	80 83       	st	Z, r24
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	a2 83       	std	Z+2, r26	; 0x02
    24a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	8e 01       	movw	r16, r28
    24aa:	07 52       	subi	r16, 0x27	; 39
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	fe 01       	movw	r30, r28
    24b0:	e3 52       	subi	r30, 0x23	; 35
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	53 e4       	ldi	r21, 0x43	; 67
    24c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	f8 01       	movw	r30, r16
    24ce:	80 83       	st	Z, r24
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	a2 83       	std	Z+2, r26	; 0x02
    24d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d6:	fe 01       	movw	r30, r28
    24d8:	e7 52       	subi	r30, 0x27	; 39
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	60 81       	ld	r22, Z
    24de:	71 81       	ldd	r23, Z+1	; 0x01
    24e0:	82 81       	ldd	r24, Z+2	; 0x02
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	44 f4       	brge	.+16     	; 0x2504 <main+0xce2>
		__ticks = 1;
    24f4:	fe 01       	movw	r30, r28
    24f6:	e9 52       	subi	r30, 0x29	; 41
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	64 c0       	rjmp	.+200    	; 0x25cc <main+0xdaa>
	else if (__tmp > 65535)
    2504:	fe 01       	movw	r30, r28
    2506:	e7 52       	subi	r30, 0x27	; 39
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    251e:	18 16       	cp	r1, r24
    2520:	0c f0       	brlt	.+2      	; 0x2524 <main+0xd02>
    2522:	43 c0       	rjmp	.+134    	; 0x25aa <main+0xd88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	fe 01       	movw	r30, r28
    2526:	e3 52       	subi	r30, 0x23	; 35
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8e 01       	movw	r16, r28
    2544:	09 52       	subi	r16, 0x29	; 41
    2546:	1f 4f       	sbci	r17, 0xFF	; 255
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	1f c0       	rjmp	.+62     	; 0x259a <main+0xd78>
    255c:	fe 01       	movw	r30, r28
    255e:	eb 52       	subi	r30, 0x2B	; 43
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	89 e1       	ldi	r24, 0x19	; 25
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	fe 01       	movw	r30, r28
    256c:	eb 52       	subi	r30, 0x2B	; 43
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <main+0xd52>
    2578:	fe 01       	movw	r30, r28
    257a:	eb 52       	subi	r30, 0x2B	; 43
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	de 01       	movw	r26, r28
    2584:	a9 52       	subi	r26, 0x29	; 41
    2586:	bf 4f       	sbci	r27, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e9 52       	subi	r30, 0x29	; 41
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	11 96       	adiw	r26, 0x01	; 1
    2596:	9c 93       	st	X, r25
    2598:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	fe 01       	movw	r30, r28
    259c:	e9 52       	subi	r30, 0x29	; 41
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	d1 f6       	brne	.-76     	; 0x255c <main+0xd3a>
    25a8:	27 c0       	rjmp	.+78     	; 0x25f8 <main+0xdd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25aa:	8e 01       	movw	r16, r28
    25ac:	09 52       	subi	r16, 0x29	; 41
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 52       	subi	r30, 0x27	; 39
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	f8 01       	movw	r30, r16
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	de 01       	movw	r26, r28
    25ce:	ad 52       	subi	r26, 0x2D	; 45
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e9 52       	subi	r30, 0x29	; 41
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	8d 93       	st	X+, r24
    25de:	9c 93       	st	X, r25
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 52       	subi	r30, 0x2D	; 45
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <main+0xdc8>
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 52       	subi	r30, 0x2D	; 45
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    _delay_ms(1000);
	LCD_clearScreen();
    25f8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>

	while(1){


		key = keypad_getpressed_key();  // read the pressed key
    25fc:	0e 94 c2 06 	call	0xd84	; 0xd84 <keypad_getpressed_key>
    2600:	fe 01       	movw	r30, r28
    2602:	ef 59       	subi	r30, 0x9F	; 159
    2604:	fe 4f       	sbci	r31, 0xFE	; 254
    2606:	80 83       	st	Z, r24
    2608:	fe 01       	movw	r30, r28
    260a:	e1 53       	subi	r30, 0x31	; 49
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a8 ec       	ldi	r26, 0xC8	; 200
    2614:	b3 e4       	ldi	r27, 0x43	; 67
    2616:	80 83       	st	Z, r24
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	a2 83       	std	Z+2, r26	; 0x02
    261c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	8e 01       	movw	r16, r28
    2620:	05 53       	subi	r16, 0x35	; 53
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	fe 01       	movw	r30, r28
    2626:	e1 53       	subi	r30, 0x31	; 49
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a e7       	ldi	r20, 0x7A	; 122
    2638:	53 e4       	ldi	r21, 0x43	; 67
    263a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	f8 01       	movw	r30, r16
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264c:	fe 01       	movw	r30, r28
    264e:	e5 53       	subi	r30, 0x35	; 53
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	44 f4       	brge	.+16     	; 0x267a <main+0xe58>
		__ticks = 1;
    266a:	fe 01       	movw	r30, r28
    266c:	e7 53       	subi	r30, 0x37	; 55
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
    2678:	64 c0       	rjmp	.+200    	; 0x2742 <main+0xf20>
	else if (__tmp > 65535)
    267a:	fe 01       	movw	r30, r28
    267c:	e5 53       	subi	r30, 0x35	; 53
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	0c f0       	brlt	.+2      	; 0x269a <main+0xe78>
    2698:	43 c0       	rjmp	.+134    	; 0x2720 <main+0xefe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	fe 01       	movw	r30, r28
    269c:	e1 53       	subi	r30, 0x31	; 49
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8e 01       	movw	r16, r28
    26ba:	07 53       	subi	r16, 0x37	; 55
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	f8 01       	movw	r30, r16
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
    26d0:	1f c0       	rjmp	.+62     	; 0x2710 <main+0xeee>
    26d2:	fe 01       	movw	r30, r28
    26d4:	e9 53       	subi	r30, 0x39	; 57
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	89 e1       	ldi	r24, 0x19	; 25
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	fe 01       	movw	r30, r28
    26e2:	e9 53       	subi	r30, 0x39	; 57
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <main+0xec8>
    26ee:	fe 01       	movw	r30, r28
    26f0:	e9 53       	subi	r30, 0x39	; 57
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	de 01       	movw	r26, r28
    26fa:	a7 53       	subi	r26, 0x37	; 55
    26fc:	bf 4f       	sbci	r27, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 53       	subi	r30, 0x37	; 55
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	11 96       	adiw	r26, 0x01	; 1
    270c:	9c 93       	st	X, r25
    270e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	fe 01       	movw	r30, r28
    2712:	e7 53       	subi	r30, 0x37	; 55
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	d1 f6       	brne	.-76     	; 0x26d2 <main+0xeb0>
    271e:	28 c0       	rjmp	.+80     	; 0x2770 <main+0xf4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	8e 01       	movw	r16, r28
    2722:	07 53       	subi	r16, 0x37	; 55
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	fe 01       	movw	r30, r28
    2728:	e5 53       	subi	r30, 0x35	; 53
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	f8 01       	movw	r30, r16
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
    2742:	de 01       	movw	r26, r28
    2744:	ab 53       	subi	r26, 0x3B	; 59
    2746:	bf 4f       	sbci	r27, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	e7 53       	subi	r30, 0x37	; 55
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	11 96       	adiw	r26, 0x01	; 1
    2754:	9c 93       	st	X, r25
    2756:	8e 93       	st	-X, r24
    2758:	fe 01       	movw	r30, r28
    275a:	eb 53       	subi	r30, 0x3B	; 59
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0xf40>
    2766:	fe 01       	movw	r30, r28
    2768:	eb 53       	subi	r30, 0x3B	; 59
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
		_delay_ms(400);

		if(key>0 && key!='#'){
    2770:	fe 01       	movw	r30, r28
    2772:	ef 59       	subi	r30, 0x9F	; 159
    2774:	fe 4f       	sbci	r31, 0xFE	; 254
    2776:	80 81       	ld	r24, Z
    2778:	88 23       	and	r24, r24
    277a:	21 f1       	breq	.+72     	; 0x27c4 <main+0xfa2>
    277c:	fe 01       	movw	r30, r28
    277e:	ef 59       	subi	r30, 0x9F	; 159
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	80 81       	ld	r24, Z
    2784:	83 32       	cpi	r24, 0x23	; 35
    2786:	f1 f0       	breq	.+60     	; 0x27c4 <main+0xfa2>
			LCD_displayCharacter('*');   // display '*'
    2788:	8a e2       	ldi	r24, 0x2A	; 42
    278a:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_displayCharacter>
			pass[i]=key;                 // put the pressed keys in array to check
    278e:	fe 01       	movw	r30, r28
    2790:	e1 5a       	subi	r30, 0xA1	; 161
    2792:	fe 4f       	sbci	r31, 0xFE	; 254
    2794:	80 81       	ld	r24, Z
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	ce 01       	movw	r24, r28
    279c:	8e 59       	subi	r24, 0x9E	; 158
    279e:	9e 4f       	sbci	r25, 0xFE	; 254
    27a0:	dc 01       	movw	r26, r24
    27a2:	a2 0f       	add	r26, r18
    27a4:	b3 1f       	adc	r27, r19
    27a6:	fe 01       	movw	r30, r28
    27a8:	ef 59       	subi	r30, 0x9F	; 159
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	80 81       	ld	r24, Z
    27ae:	8c 93       	st	X, r24
			i++;
    27b0:	de 01       	movw	r26, r28
    27b2:	a1 5a       	subi	r26, 0xA1	; 161
    27b4:	be 4f       	sbci	r27, 0xFE	; 254
    27b6:	fe 01       	movw	r30, r28
    27b8:	e1 5a       	subi	r30, 0xA1	; 161
    27ba:	fe 4f       	sbci	r31, 0xFE	; 254
    27bc:	80 81       	ld	r24, Z
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	8c 93       	st	X, r24
    27c2:	1c cf       	rjmp	.-456    	; 0x25fc <main+0xdda>
		}
		else if (key=='#'){
    27c4:	fe 01       	movw	r30, r28
    27c6:	ef 59       	subi	r30, 0x9F	; 159
    27c8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ca:	80 81       	ld	r24, Z
    27cc:	83 32       	cpi	r24, 0x23	; 35
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <main+0xfb0>
    27d0:	15 cf       	rjmp	.-470    	; 0x25fc <main+0xdda>
			for(uint8 j=0 ; j<8 ; j++){  // check the pressed keys array whit the last password array
    27d2:	fe 01       	movw	r30, r28
    27d4:	ef 5a       	subi	r30, 0xAF	; 175
    27d6:	fe 4f       	sbci	r31, 0xFE	; 254
    27d8:	10 82       	st	Z, r1
    27da:	2e c0       	rjmp	.+92     	; 0x2838 <main+0x1016>
			     if(pass[j]==lastPass[j]) count++;
    27dc:	fe 01       	movw	r30, r28
    27de:	ef 5a       	subi	r30, 0xAF	; 175
    27e0:	fe 4f       	sbci	r31, 0xFE	; 254
    27e2:	80 81       	ld	r24, Z
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	ce 01       	movw	r24, r28
    27ea:	8e 59       	subi	r24, 0x9E	; 158
    27ec:	9e 4f       	sbci	r25, 0xFE	; 254
    27ee:	fc 01       	movw	r30, r24
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	40 81       	ld	r20, Z
    27f6:	fe 01       	movw	r30, r28
    27f8:	ef 5a       	subi	r30, 0xAF	; 175
    27fa:	fe 4f       	sbci	r31, 0xFE	; 254
    27fc:	80 81       	ld	r24, Z
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	ce 01       	movw	r24, r28
    2804:	85 59       	subi	r24, 0x95	; 149
    2806:	9e 4f       	sbci	r25, 0xFE	; 254
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	48 17       	cp	r20, r24
    2812:	49 f4       	brne	.+18     	; 0x2826 <main+0x1004>
    2814:	de 01       	movw	r26, r28
    2816:	a2 5a       	subi	r26, 0xA2	; 162
    2818:	be 4f       	sbci	r27, 0xFE	; 254
    281a:	fe 01       	movw	r30, r28
    281c:	e2 5a       	subi	r30, 0xA2	; 162
    281e:	fe 4f       	sbci	r31, 0xFE	; 254
    2820:	80 81       	ld	r24, Z
    2822:	8f 5f       	subi	r24, 0xFF	; 255
    2824:	8c 93       	st	X, r24
			LCD_displayCharacter('*');   // display '*'
			pass[i]=key;                 // put the pressed keys in array to check
			i++;
		}
		else if (key=='#'){
			for(uint8 j=0 ; j<8 ; j++){  // check the pressed keys array whit the last password array
    2826:	de 01       	movw	r26, r28
    2828:	af 5a       	subi	r26, 0xAF	; 175
    282a:	be 4f       	sbci	r27, 0xFE	; 254
    282c:	fe 01       	movw	r30, r28
    282e:	ef 5a       	subi	r30, 0xAF	; 175
    2830:	fe 4f       	sbci	r31, 0xFE	; 254
    2832:	80 81       	ld	r24, Z
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	8c 93       	st	X, r24
    2838:	fe 01       	movw	r30, r28
    283a:	ef 5a       	subi	r30, 0xAF	; 175
    283c:	fe 4f       	sbci	r31, 0xFE	; 254
    283e:	80 81       	ld	r24, Z
    2840:	88 30       	cpi	r24, 0x08	; 8
    2842:	60 f2       	brcs	.-104    	; 0x27dc <main+0xfba>
						}

/*******************************************************************/
			/* if the password is correct */

						if(count==8){
    2844:	fe 01       	movw	r30, r28
    2846:	e2 5a       	subi	r30, 0xA2	; 162
    2848:	fe 4f       	sbci	r31, 0xFE	; 254
    284a:	80 81       	ld	r24, Z
    284c:	88 30       	cpi	r24, 0x08	; 8
    284e:	11 f0       	breq	.+4      	; 0x2854 <main+0x1032>
    2850:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <main+0x22e6>
							 LCD_clearScreen();
    2854:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
						     LCD_displayString("correct password");
    2858:	8f e6       	ldi	r24, 0x6F	; 111
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
    2860:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <main+0x22b2>
				 */


while(count==8){

						     LCD_displayStringRowColumn(1,0,"wait ..... ");
    2864:	20 e8       	ldi	r18, 0x80	; 128
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	a9 01       	movw	r20, r18
    286e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <LCD_displayStringRowColumn>
    2872:	fe 01       	movw	r30, r28
    2874:	ef 53       	subi	r30, 0x3F	; 63
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	aa e7       	ldi	r26, 0x7A	; 122
    287e:	b4 e4       	ldi	r27, 0x44	; 68
    2880:	80 83       	st	Z, r24
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	a2 83       	std	Z+2, r26	; 0x02
    2886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	8e 01       	movw	r16, r28
    288a:	03 54       	subi	r16, 0x43	; 67
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	ef 53       	subi	r30, 0x3F	; 63
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a e7       	ldi	r20, 0x7A	; 122
    28a2:	53 e4       	ldi	r21, 0x43	; 67
    28a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	f8 01       	movw	r30, r16
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b6:	fe 01       	movw	r30, r28
    28b8:	e3 54       	subi	r30, 0x43	; 67
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	44 f4       	brge	.+16     	; 0x28e4 <main+0x10c2>
		__ticks = 1;
    28d4:	fe 01       	movw	r30, r28
    28d6:	e5 54       	subi	r30, 0x45	; 69
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	64 c0       	rjmp	.+200    	; 0x29ac <main+0x118a>
	else if (__tmp > 65535)
    28e4:	fe 01       	movw	r30, r28
    28e6:	e3 54       	subi	r30, 0x43	; 67
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	0c f0       	brlt	.+2      	; 0x2904 <main+0x10e2>
    2902:	43 c0       	rjmp	.+134    	; 0x298a <main+0x1168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	fe 01       	movw	r30, r28
    2906:	ef 53       	subi	r30, 0x3F	; 63
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8e 01       	movw	r16, r28
    2924:	05 54       	subi	r16, 0x45	; 69
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	f8 01       	movw	r30, r16
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	1f c0       	rjmp	.+62     	; 0x297a <main+0x1158>
    293c:	fe 01       	movw	r30, r28
    293e:	e7 54       	subi	r30, 0x47	; 71
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	89 e1       	ldi	r24, 0x19	; 25
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	fe 01       	movw	r30, r28
    294c:	e7 54       	subi	r30, 0x47	; 71
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0x1132>
    2958:	fe 01       	movw	r30, r28
    295a:	e7 54       	subi	r30, 0x47	; 71
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2962:	de 01       	movw	r26, r28
    2964:	a5 54       	subi	r26, 0x45	; 69
    2966:	bf 4f       	sbci	r27, 0xFF	; 255
    2968:	fe 01       	movw	r30, r28
    296a:	e5 54       	subi	r30, 0x45	; 69
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	9c 93       	st	X, r25
    2978:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	fe 01       	movw	r30, r28
    297c:	e5 54       	subi	r30, 0x45	; 69
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	d1 f6       	brne	.-76     	; 0x293c <main+0x111a>
    2988:	27 c0       	rjmp	.+78     	; 0x29d8 <main+0x11b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	8e 01       	movw	r16, r28
    298c:	05 54       	subi	r16, 0x45	; 69
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	fe 01       	movw	r30, r28
    2992:	e3 54       	subi	r30, 0x43	; 67
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	de 01       	movw	r26, r28
    29ae:	a9 54       	subi	r26, 0x49	; 73
    29b0:	bf 4f       	sbci	r27, 0xFF	; 255
    29b2:	fe 01       	movw	r30, r28
    29b4:	e5 54       	subi	r30, 0x45	; 69
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	8d 93       	st	X+, r24
    29be:	9c 93       	st	X, r25
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 54       	subi	r30, 0x49	; 73
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <main+0x11a8>
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 54       	subi	r30, 0x49	; 73
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
							 _delay_ms(1000);
						     LCD_clearScreen();
    29d8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
						     /***************************/
						     LCD_displayString("(1)open,(2)close");
    29dc:	8c e8       	ldi	r24, 0x8C	; 140
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
						     LCD_displayStringRowColumn(1,0,"(3)change pass");
    29e4:	2d e9       	ldi	r18, 0x9D	; 157
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	a9 01       	movw	r20, r18
    29ee:	0e 94 cb 0b 	call	0x1796	; 0x1796 <LCD_displayStringRowColumn>
    29f2:	fe 01       	movw	r30, r28
    29f4:	ed 54       	subi	r30, 0x4D	; 77
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	aa e7       	ldi	r26, 0x7A	; 122
    29fe:	b4 e4       	ldi	r27, 0x44	; 68
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	01 55       	subi	r16, 0x51	; 81
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ed 54       	subi	r30, 0x4D	; 77
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	53 e4       	ldi	r21, 0x43	; 67
    2a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	80 83       	st	Z, r24
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	a2 83       	std	Z+2, r26	; 0x02
    2a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a36:	fe 01       	movw	r30, r28
    2a38:	e1 55       	subi	r30, 0x51	; 81
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	44 f4       	brge	.+16     	; 0x2a64 <main+0x1242>
		__ticks = 1;
    2a54:	fe 01       	movw	r30, r28
    2a56:	e3 55       	subi	r30, 0x53	; 83
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	64 c0       	rjmp	.+200    	; 0x2b2c <main+0x130a>
	else if (__tmp > 65535)
    2a64:	fe 01       	movw	r30, r28
    2a66:	e1 55       	subi	r30, 0x51	; 81
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	0c f0       	brlt	.+2      	; 0x2a84 <main+0x1262>
    2a82:	43 c0       	rjmp	.+134    	; 0x2b0a <main+0x12e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	fe 01       	movw	r30, r28
    2a86:	ed 54       	subi	r30, 0x4D	; 77
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8e 01       	movw	r16, r28
    2aa4:	03 55       	subi	r16, 0x53	; 83
    2aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24
    2aba:	1f c0       	rjmp	.+62     	; 0x2afa <main+0x12d8>
    2abc:	fe 01       	movw	r30, r28
    2abe:	e5 55       	subi	r30, 0x55	; 85
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	89 e1       	ldi	r24, 0x19	; 25
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	fe 01       	movw	r30, r28
    2acc:	e5 55       	subi	r30, 0x55	; 85
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <main+0x12b2>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e5 55       	subi	r30, 0x55	; 85
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	de 01       	movw	r26, r28
    2ae4:	a3 55       	subi	r26, 0x53	; 83
    2ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e3 55       	subi	r30, 0x53	; 83
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	11 96       	adiw	r26, 0x01	; 1
    2af6:	9c 93       	st	X, r25
    2af8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e3 55       	subi	r30, 0x53	; 83
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	d1 f6       	brne	.-76     	; 0x2abc <main+0x129a>
    2b08:	27 c0       	rjmp	.+78     	; 0x2b58 <main+0x1336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	03 55       	subi	r16, 0x53	; 83
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e1 55       	subi	r30, 0x51	; 81
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	de 01       	movw	r26, r28
    2b2e:	a7 55       	subi	r26, 0x57	; 87
    2b30:	bf 4f       	sbci	r27, 0xFF	; 255
    2b32:	fe 01       	movw	r30, r28
    2b34:	e3 55       	subi	r30, 0x53	; 83
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	8d 93       	st	X+, r24
    2b3e:	9c 93       	st	X, r25
    2b40:	fe 01       	movw	r30, r28
    2b42:	e7 55       	subi	r30, 0x57	; 87
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <main+0x1328>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e7 55       	subi	r30, 0x57	; 87
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
							 _delay_ms(1000);
						     LCD_clearScreen();
    2b58:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>

						     press = keypad_getpressed_key();  // get the press to know what is the user want
    2b5c:	0e 94 c2 06 	call	0xd84	; 0xd84 <keypad_getpressed_key>
    2b60:	fe 01       	movw	r30, r28
    2b62:	e0 5a       	subi	r30, 0xA0	; 160
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	80 83       	st	Z, r24

						    if(press == 1)        UART_sendByte(1); // send the press number to the other micro-cntr
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e0 5a       	subi	r30, 0xA0	; 160
    2b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6e:	80 81       	ld	r24, Z
    2b70:	81 30       	cpi	r24, 0x01	; 1
    2b72:	29 f4       	brne	.+10     	; 0x2b7e <main+0x135c>
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    2b7a:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <main+0x22a2>
						    else if (press == 2)  UART_sendByte(2); // send the press number to the other micro-cntr
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e0 5a       	subi	r30, 0xA0	; 160
    2b82:	fe 4f       	sbci	r31, 0xFE	; 254
    2b84:	80 81       	ld	r24, Z
    2b86:	82 30       	cpi	r24, 0x02	; 2
    2b88:	29 f4       	brne	.+10     	; 0x2b94 <main+0x1372>
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    2b90:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <main+0x22a2>
/*
 * if user want to change the password we do :
 */
						    else if(press == 3){
    2b94:	fe 01       	movw	r30, r28
    2b96:	e0 5a       	subi	r30, 0xA0	; 160
    2b98:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9a:	80 81       	ld	r24, Z
    2b9c:	83 30       	cpi	r24, 0x03	; 3
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <main+0x1380>
    2ba0:	91 c7       	rjmp	.+3874   	; 0x3ac4 <main+0x22a2>
                                 loop=0;
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	ec 5a       	subi	r30, 0xAC	; 172
    2ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba8:	10 82       	st	Z, r1
                                 /* send the press number to the other micro-cntr
                                  * to know
                                  */
						    	 UART_sendByte(3);
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
						    	 LCD_displayString("enter password");
    2bb0:	8c ea       	ldi	r24, 0xAC	; 172
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
						    	 LCD_displayStringRowColumn(1,0,"without (0 or #)");
    2bb8:	2b eb       	ldi	r18, 0xBB	; 187
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	a9 01       	movw	r20, r18
    2bc2:	0e 94 cb 0b 	call	0x1796	; 0x1796 <LCD_displayStringRowColumn>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	eb 55       	subi	r30, 0x5B	; 91
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	aa e7       	ldi	r26, 0x7A	; 122
    2bd2:	b4 e4       	ldi	r27, 0x44	; 68
    2bd4:	80 83       	st	Z, r24
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	a2 83       	std	Z+2, r26	; 0x02
    2bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bdc:	8e 01       	movw	r16, r28
    2bde:	0f 55       	subi	r16, 0x5F	; 95
    2be0:	1f 4f       	sbci	r17, 0xFF	; 255
    2be2:	fe 01       	movw	r30, r28
    2be4:	eb 55       	subi	r30, 0x5B	; 91
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	60 81       	ld	r22, Z
    2bea:	71 81       	ldd	r23, Z+1	; 0x01
    2bec:	82 81       	ldd	r24, Z+2	; 0x02
    2bee:	93 81       	ldd	r25, Z+3	; 0x03
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	53 e4       	ldi	r21, 0x43	; 67
    2bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	f8 01       	movw	r30, r16
    2c02:	80 83       	st	Z, r24
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	a2 83       	std	Z+2, r26	; 0x02
    2c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ef 55       	subi	r30, 0x5F	; 95
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	44 f4       	brge	.+16     	; 0x2c38 <main+0x1416>
		__ticks = 1;
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e1 56       	subi	r30, 0x61	; 97
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
    2c36:	64 c0       	rjmp	.+200    	; 0x2d00 <main+0x14de>
	else if (__tmp > 65535)
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ef 55       	subi	r30, 0x5F	; 95
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	3f ef       	ldi	r19, 0xFF	; 255
    2c4a:	4f e7       	ldi	r20, 0x7F	; 127
    2c4c:	57 e4       	ldi	r21, 0x47	; 71
    2c4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c52:	18 16       	cp	r1, r24
    2c54:	0c f0       	brlt	.+2      	; 0x2c58 <main+0x1436>
    2c56:	43 c0       	rjmp	.+134    	; 0x2cde <main+0x14bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	fe 01       	movw	r30, r28
    2c5a:	eb 55       	subi	r30, 0x5B	; 91
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e2       	ldi	r20, 0x20	; 32
    2c6c:	51 e4       	ldi	r21, 0x41	; 65
    2c6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8e 01       	movw	r16, r28
    2c78:	01 56       	subi	r16, 0x61	; 97
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	cd 01       	movw	r24, r26
    2c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	f8 01       	movw	r30, r16
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	80 83       	st	Z, r24
    2c8e:	1f c0       	rjmp	.+62     	; 0x2cce <main+0x14ac>
    2c90:	fe 01       	movw	r30, r28
    2c92:	e3 56       	subi	r30, 0x63	; 99
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	89 e1       	ldi	r24, 0x19	; 25
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	91 83       	std	Z+1, r25	; 0x01
    2c9c:	80 83       	st	Z, r24
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e3 56       	subi	r30, 0x63	; 99
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <main+0x1486>
    2cac:	fe 01       	movw	r30, r28
    2cae:	e3 56       	subi	r30, 0x63	; 99
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	de 01       	movw	r26, r28
    2cb8:	a1 56       	subi	r26, 0x61	; 97
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e1 56       	subi	r30, 0x61	; 97
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	11 96       	adiw	r26, 0x01	; 1
    2cca:	9c 93       	st	X, r25
    2ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e1 56       	subi	r30, 0x61	; 97
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	91 81       	ldd	r25, Z+1	; 0x01
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	d1 f6       	brne	.-76     	; 0x2c90 <main+0x146e>
    2cdc:	27 c0       	rjmp	.+78     	; 0x2d2c <main+0x150a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	8e 01       	movw	r16, r28
    2ce0:	01 56       	subi	r16, 0x61	; 97
    2ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ef 55       	subi	r30, 0x5F	; 95
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	60 81       	ld	r22, Z
    2cec:	71 81       	ldd	r23, Z+1	; 0x01
    2cee:	82 81       	ldd	r24, Z+2	; 0x02
    2cf0:	93 81       	ldd	r25, Z+3	; 0x03
    2cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	80 83       	st	Z, r24
    2d00:	de 01       	movw	r26, r28
    2d02:	a5 56       	subi	r26, 0x65	; 101
    2d04:	bf 4f       	sbci	r27, 0xFF	; 255
    2d06:	fe 01       	movw	r30, r28
    2d08:	e1 56       	subi	r30, 0x61	; 97
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	80 81       	ld	r24, Z
    2d0e:	91 81       	ldd	r25, Z+1	; 0x01
    2d10:	8d 93       	st	X+, r24
    2d12:	9c 93       	st	X, r25
    2d14:	fe 01       	movw	r30, r28
    2d16:	e5 56       	subi	r30, 0x65	; 101
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <main+0x14fc>
    2d22:	fe 01       	movw	r30, r28
    2d24:	e5 56       	subi	r30, 0x65	; 101
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	80 83       	st	Z, r24
						    	 _delay_ms(1000);
						    	 LCD_clearScreen();
    2d2c:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
    2d30:	c2 c6       	rjmp	.+3460   	; 0x3ab6 <main+0x2294>

				while(loop == 0 ){ // use while loop to can save the all pressed key (new pass) from user

						    	 key2 = keypad_getpressed_key();
    2d32:	0e 94 c2 06 	call	0xd84	; 0xd84 <keypad_getpressed_key>
    2d36:	fe 01       	movw	r30, r28
    2d38:	eb 5a       	subi	r30, 0xAB	; 171
    2d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3c:	80 83       	st	Z, r24
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e9 56       	subi	r30, 0x69	; 105
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	a8 ec       	ldi	r26, 0xC8	; 200
    2d4a:	b3 e4       	ldi	r27, 0x43	; 67
    2d4c:	80 83       	st	Z, r24
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	a2 83       	std	Z+2, r26	; 0x02
    2d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d54:	8e 01       	movw	r16, r28
    2d56:	0d 56       	subi	r16, 0x6D	; 109
    2d58:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e9 56       	subi	r30, 0x69	; 105
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	4a e7       	ldi	r20, 0x7A	; 122
    2d6e:	53 e4       	ldi	r21, 0x43	; 67
    2d70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	80 83       	st	Z, r24
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	a2 83       	std	Z+2, r26	; 0x02
    2d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d82:	fe 01       	movw	r30, r28
    2d84:	ed 56       	subi	r30, 0x6D	; 109
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	60 81       	ld	r22, Z
    2d8a:	71 81       	ldd	r23, Z+1	; 0x01
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	44 f4       	brge	.+16     	; 0x2db0 <main+0x158e>
		__ticks = 1;
    2da0:	fe 01       	movw	r30, r28
    2da2:	ef 56       	subi	r30, 0x6F	; 111
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	80 83       	st	Z, r24
    2dae:	64 c0       	rjmp	.+200    	; 0x2e78 <main+0x1656>
	else if (__tmp > 65535)
    2db0:	fe 01       	movw	r30, r28
    2db2:	ed 56       	subi	r30, 0x6D	; 109
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	60 81       	ld	r22, Z
    2db8:	71 81       	ldd	r23, Z+1	; 0x01
    2dba:	82 81       	ldd	r24, Z+2	; 0x02
    2dbc:	93 81       	ldd	r25, Z+3	; 0x03
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	0c f0       	brlt	.+2      	; 0x2dd0 <main+0x15ae>
    2dce:	43 c0       	rjmp	.+134    	; 0x2e56 <main+0x1634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e9 56       	subi	r30, 0x69	; 105
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	60 81       	ld	r22, Z
    2dd8:	71 81       	ldd	r23, Z+1	; 0x01
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	8e 01       	movw	r16, r28
    2df0:	0f 56       	subi	r16, 0x6F	; 111
    2df2:	1f 4f       	sbci	r17, 0xFF	; 255
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	f8 01       	movw	r30, r16
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24
    2e06:	1f c0       	rjmp	.+62     	; 0x2e46 <main+0x1624>
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e1 57       	subi	r30, 0x71	; 113
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	89 e1       	ldi	r24, 0x19	; 25
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
    2e16:	fe 01       	movw	r30, r28
    2e18:	e1 57       	subi	r30, 0x71	; 113
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <main+0x15fe>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e1 57       	subi	r30, 0x71	; 113
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2e:	de 01       	movw	r26, r28
    2e30:	af 56       	subi	r26, 0x6F	; 111
    2e32:	bf 4f       	sbci	r27, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	ef 56       	subi	r30, 0x6F	; 111
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	11 96       	adiw	r26, 0x01	; 1
    2e42:	9c 93       	st	X, r25
    2e44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	fe 01       	movw	r30, r28
    2e48:	ef 56       	subi	r30, 0x6F	; 111
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	d1 f6       	brne	.-76     	; 0x2e08 <main+0x15e6>
    2e54:	28 c0       	rjmp	.+80     	; 0x2ea6 <main+0x1684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	8e 01       	movw	r16, r28
    2e58:	0f 56       	subi	r16, 0x6F	; 111
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	ed 56       	subi	r30, 0x6D	; 109
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	f8 01       	movw	r30, r16
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
    2e78:	de 01       	movw	r26, r28
    2e7a:	a3 57       	subi	r26, 0x73	; 115
    2e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ef 56       	subi	r30, 0x6F	; 111
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	11 96       	adiw	r26, 0x01	; 1
    2e8a:	9c 93       	st	X, r25
    2e8c:	8e 93       	st	-X, r24
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e3 57       	subi	r30, 0x73	; 115
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <main+0x1676>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e3 57       	subi	r30, 0x73	; 115
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
						    	 _delay_ms(400);
						    	 if(key2>0 && key2!='#'){
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	eb 5a       	subi	r30, 0xAB	; 171
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	80 81       	ld	r24, Z
    2eae:	88 23       	and	r24, r24
    2eb0:	21 f1       	breq	.+72     	; 0x2efa <main+0x16d8>
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	eb 5a       	subi	r30, 0xAB	; 171
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	80 81       	ld	r24, Z
    2eba:	83 32       	cpi	r24, 0x23	; 35
    2ebc:	f1 f0       	breq	.+60     	; 0x2efa <main+0x16d8>
						    	 			LCD_displayCharacter('*');
    2ebe:	8a e2       	ldi	r24, 0x2A	; 42
    2ec0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_displayCharacter>
						    	 			newPass[c]=key2;
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 5a       	subi	r30, 0xAD	; 173
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	80 81       	ld	r24, Z
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	8c 58       	subi	r24, 0x8C	; 140
    2ed4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	a2 0f       	add	r26, r18
    2eda:	b3 1f       	adc	r27, r19
    2edc:	fe 01       	movw	r30, r28
    2ede:	eb 5a       	subi	r30, 0xAB	; 171
    2ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8c 93       	st	X, r24
						    	 			c++;
    2ee6:	de 01       	movw	r26, r28
    2ee8:	ad 5a       	subi	r26, 0xAD	; 173
    2eea:	be 4f       	sbci	r27, 0xFE	; 254
    2eec:	fe 01       	movw	r30, r28
    2eee:	ed 5a       	subi	r30, 0xAD	; 173
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	80 81       	ld	r24, Z
    2ef4:	8f 5f       	subi	r24, 0xFF	; 255
    2ef6:	8c 93       	st	X, r24
    2ef8:	de c5       	rjmp	.+3004   	; 0x3ab6 <main+0x2294>
						    	 		}
						    	 else if(key2 == '#'){
    2efa:	fe 01       	movw	r30, r28
    2efc:	eb 5a       	subi	r30, 0xAB	; 171
    2efe:	fe 4f       	sbci	r31, 0xFE	; 254
    2f00:	80 81       	ld	r24, Z
    2f02:	83 32       	cpi	r24, 0x23	; 35
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <main+0x16e6>
    2f06:	d7 c5       	rjmp	.+2990   	; 0x3ab6 <main+0x2294>
                                    /* send the new pass byte by byte thats easier for me (: */
						    		 s1=newPass[0];
    2f08:	de 01       	movw	r26, r28
    2f0a:	a3 5a       	subi	r26, 0xA3	; 163
    2f0c:	be 4f       	sbci	r27, 0xFE	; 254
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ec 58       	subi	r30, 0x8C	; 140
    2f12:	fe 4f       	sbci	r31, 0xFE	; 254
    2f14:	80 81       	ld	r24, Z
    2f16:	8c 93       	st	X, r24
						    		 s2=newPass[1];
    2f18:	de 01       	movw	r26, r28
    2f1a:	a4 5a       	subi	r26, 0xA4	; 164
    2f1c:	be 4f       	sbci	r27, 0xFE	; 254
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ec 58       	subi	r30, 0x8C	; 140
    2f22:	fe 4f       	sbci	r31, 0xFE	; 254
    2f24:	81 81       	ldd	r24, Z+1	; 0x01
    2f26:	8c 93       	st	X, r24
						    		 s3=newPass[2];
    2f28:	de 01       	movw	r26, r28
    2f2a:	a5 5a       	subi	r26, 0xA5	; 165
    2f2c:	be 4f       	sbci	r27, 0xFE	; 254
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ec 58       	subi	r30, 0x8C	; 140
    2f32:	fe 4f       	sbci	r31, 0xFE	; 254
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	8c 93       	st	X, r24
						    		 s4=newPass[3];
    2f38:	de 01       	movw	r26, r28
    2f3a:	a6 5a       	subi	r26, 0xA6	; 166
    2f3c:	be 4f       	sbci	r27, 0xFE	; 254
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ec 58       	subi	r30, 0x8C	; 140
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	83 81       	ldd	r24, Z+3	; 0x03
    2f46:	8c 93       	st	X, r24
						    		 s5=newPass[4];
    2f48:	de 01       	movw	r26, r28
    2f4a:	a7 5a       	subi	r26, 0xA7	; 167
    2f4c:	be 4f       	sbci	r27, 0xFE	; 254
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ec 58       	subi	r30, 0x8C	; 140
    2f52:	fe 4f       	sbci	r31, 0xFE	; 254
    2f54:	84 81       	ldd	r24, Z+4	; 0x04
    2f56:	8c 93       	st	X, r24
						    		 s6=newPass[5];
    2f58:	de 01       	movw	r26, r28
    2f5a:	a8 5a       	subi	r26, 0xA8	; 168
    2f5c:	be 4f       	sbci	r27, 0xFE	; 254
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ec 58       	subi	r30, 0x8C	; 140
    2f62:	fe 4f       	sbci	r31, 0xFE	; 254
    2f64:	85 81       	ldd	r24, Z+5	; 0x05
    2f66:	8c 93       	st	X, r24
						    		 s7=newPass[6];
    2f68:	de 01       	movw	r26, r28
    2f6a:	a9 5a       	subi	r26, 0xA9	; 169
    2f6c:	be 4f       	sbci	r27, 0xFE	; 254
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ec 58       	subi	r30, 0x8C	; 140
    2f72:	fe 4f       	sbci	r31, 0xFE	; 254
    2f74:	86 81       	ldd	r24, Z+6	; 0x06
    2f76:	8c 93       	st	X, r24
						    		 s8=newPass[7];
    2f78:	de 01       	movw	r26, r28
    2f7a:	aa 5a       	subi	r26, 0xAA	; 170
    2f7c:	be 4f       	sbci	r27, 0xFE	; 254
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ec 58       	subi	r30, 0x8C	; 140
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	87 81       	ldd	r24, Z+7	; 0x07
    2f86:	8c 93       	st	X, r24

						    		 UART_sendByte(s1);
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e3 5a       	subi	r30, 0xA3	; 163
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	80 81       	ld	r24, Z
    2f90:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    2f94:	fe 01       	movw	r30, r28
    2f96:	e7 57       	subi	r30, 0x77	; 119
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 e2       	ldi	r26, 0x20	; 32
    2fa0:	b1 e4       	ldi	r27, 0x41	; 65
    2fa2:	80 83       	st	Z, r24
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	a2 83       	std	Z+2, r26	; 0x02
    2fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	8e 01       	movw	r16, r28
    2fac:	0b 57       	subi	r16, 0x7B	; 123
    2fae:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e7 57       	subi	r30, 0x77	; 119
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4a e7       	ldi	r20, 0x7A	; 122
    2fc4:	53 e4       	ldi	r21, 0x43	; 67
    2fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	f8 01       	movw	r30, r16
    2fd0:	80 83       	st	Z, r24
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	a2 83       	std	Z+2, r26	; 0x02
    2fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd8:	fe 01       	movw	r30, r28
    2fda:	eb 57       	subi	r30, 0x7B	; 123
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e8       	ldi	r20, 0x80	; 128
    2fec:	5f e3       	ldi	r21, 0x3F	; 63
    2fee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ff2:	88 23       	and	r24, r24
    2ff4:	44 f4       	brge	.+16     	; 0x3006 <main+0x17e4>
		__ticks = 1;
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ed 57       	subi	r30, 0x7D	; 125
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
    3004:	64 c0       	rjmp	.+200    	; 0x30ce <main+0x18ac>
	else if (__tmp > 65535)
    3006:	fe 01       	movw	r30, r28
    3008:	eb 57       	subi	r30, 0x7B	; 123
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	3f ef       	ldi	r19, 0xFF	; 255
    3018:	4f e7       	ldi	r20, 0x7F	; 127
    301a:	57 e4       	ldi	r21, 0x47	; 71
    301c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3020:	18 16       	cp	r1, r24
    3022:	0c f0       	brlt	.+2      	; 0x3026 <main+0x1804>
    3024:	43 c0       	rjmp	.+134    	; 0x30ac <main+0x188a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3026:	fe 01       	movw	r30, r28
    3028:	e7 57       	subi	r30, 0x77	; 119
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	60 81       	ld	r22, Z
    302e:	71 81       	ldd	r23, Z+1	; 0x01
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	93 81       	ldd	r25, Z+3	; 0x03
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e2       	ldi	r20, 0x20	; 32
    303a:	51 e4       	ldi	r21, 0x41	; 65
    303c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	8e 01       	movw	r16, r28
    3046:	0d 57       	subi	r16, 0x7D	; 125
    3048:	1f 4f       	sbci	r17, 0xFF	; 255
    304a:	bc 01       	movw	r22, r24
    304c:	cd 01       	movw	r24, r26
    304e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	f8 01       	movw	r30, r16
    3058:	91 83       	std	Z+1, r25	; 0x01
    305a:	80 83       	st	Z, r24
    305c:	1f c0       	rjmp	.+62     	; 0x309c <main+0x187a>
    305e:	fe 01       	movw	r30, r28
    3060:	ef 57       	subi	r30, 0x7F	; 127
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	89 e1       	ldi	r24, 0x19	; 25
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
    306c:	fe 01       	movw	r30, r28
    306e:	ef 57       	subi	r30, 0x7F	; 127
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	80 81       	ld	r24, Z
    3074:	91 81       	ldd	r25, Z+1	; 0x01
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <main+0x1854>
    307a:	fe 01       	movw	r30, r28
    307c:	ef 57       	subi	r30, 0x7F	; 127
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3084:	de 01       	movw	r26, r28
    3086:	ad 57       	subi	r26, 0x7D	; 125
    3088:	bf 4f       	sbci	r27, 0xFF	; 255
    308a:	fe 01       	movw	r30, r28
    308c:	ed 57       	subi	r30, 0x7D	; 125
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 81       	ld	r24, Z
    3092:	91 81       	ldd	r25, Z+1	; 0x01
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	11 96       	adiw	r26, 0x01	; 1
    3098:	9c 93       	st	X, r25
    309a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	fe 01       	movw	r30, r28
    309e:	ed 57       	subi	r30, 0x7D	; 125
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	d1 f6       	brne	.-76     	; 0x305e <main+0x183c>
    30aa:	27 c0       	rjmp	.+78     	; 0x30fa <main+0x18d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	8e 01       	movw	r16, r28
    30ae:	0d 57       	subi	r16, 0x7D	; 125
    30b0:	1f 4f       	sbci	r17, 0xFF	; 255
    30b2:	fe 01       	movw	r30, r28
    30b4:	eb 57       	subi	r30, 0x7B	; 123
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	f8 01       	movw	r30, r16
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	80 83       	st	Z, r24
    30ce:	de 01       	movw	r26, r28
    30d0:	a1 58       	subi	r26, 0x81	; 129
    30d2:	bf 4f       	sbci	r27, 0xFF	; 255
    30d4:	fe 01       	movw	r30, r28
    30d6:	ed 57       	subi	r30, 0x7D	; 125
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	8d 93       	st	X+, r24
    30e0:	9c 93       	st	X, r25
    30e2:	fe 01       	movw	r30, r28
    30e4:	e1 58       	subi	r30, 0x81	; 129
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <main+0x18ca>
    30f0:	fe 01       	movw	r30, r28
    30f2:	e1 58       	subi	r30, 0x81	; 129
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
						    		 _delay_ms(10);
						    		 UART_sendByte(s2);
    30fa:	fe 01       	movw	r30, r28
    30fc:	e4 5a       	subi	r30, 0xA4	; 164
    30fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3100:	80 81       	ld	r24, Z
    3102:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    3106:	fe 01       	movw	r30, r28
    3108:	e5 58       	subi	r30, 0x85	; 133
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e2       	ldi	r26, 0x20	; 32
    3112:	b1 e4       	ldi	r27, 0x41	; 65
    3114:	80 83       	st	Z, r24
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	a2 83       	std	Z+2, r26	; 0x02
    311a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311c:	8e 01       	movw	r16, r28
    311e:	09 58       	subi	r16, 0x89	; 137
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	fe 01       	movw	r30, r28
    3124:	e5 58       	subi	r30, 0x85	; 133
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a e7       	ldi	r20, 0x7A	; 122
    3136:	53 e4       	ldi	r21, 0x43	; 67
    3138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	f8 01       	movw	r30, r16
    3142:	80 83       	st	Z, r24
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	a2 83       	std	Z+2, r26	; 0x02
    3148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    314a:	fe 01       	movw	r30, r28
    314c:	e9 58       	subi	r30, 0x89	; 137
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e8       	ldi	r20, 0x80	; 128
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3164:	88 23       	and	r24, r24
    3166:	44 f4       	brge	.+16     	; 0x3178 <main+0x1956>
		__ticks = 1;
    3168:	fe 01       	movw	r30, r28
    316a:	eb 58       	subi	r30, 0x8B	; 139
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	80 83       	st	Z, r24
    3176:	64 c0       	rjmp	.+200    	; 0x3240 <main+0x1a1e>
	else if (__tmp > 65535)
    3178:	fe 01       	movw	r30, r28
    317a:	e9 58       	subi	r30, 0x89	; 137
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	0c f0       	brlt	.+2      	; 0x3198 <main+0x1976>
    3196:	43 c0       	rjmp	.+134    	; 0x321e <main+0x19fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3198:	fe 01       	movw	r30, r28
    319a:	e5 58       	subi	r30, 0x85	; 133
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	51 e4       	ldi	r21, 0x41	; 65
    31ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	8e 01       	movw	r16, r28
    31b8:	0b 58       	subi	r16, 0x8B	; 139
    31ba:	1f 4f       	sbci	r17, 0xFF	; 255
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	f8 01       	movw	r30, r16
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
    31ce:	1f c0       	rjmp	.+62     	; 0x320e <main+0x19ec>
    31d0:	fe 01       	movw	r30, r28
    31d2:	ed 58       	subi	r30, 0x8D	; 141
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	89 e1       	ldi	r24, 0x19	; 25
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	fe 01       	movw	r30, r28
    31e0:	ed 58       	subi	r30, 0x8D	; 141
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 81       	ld	r24, Z
    31e6:	91 81       	ldd	r25, Z+1	; 0x01
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <main+0x19c6>
    31ec:	fe 01       	movw	r30, r28
    31ee:	ed 58       	subi	r30, 0x8D	; 141
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f6:	de 01       	movw	r26, r28
    31f8:	ab 58       	subi	r26, 0x8B	; 139
    31fa:	bf 4f       	sbci	r27, 0xFF	; 255
    31fc:	fe 01       	movw	r30, r28
    31fe:	eb 58       	subi	r30, 0x8B	; 139
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	11 96       	adiw	r26, 0x01	; 1
    320a:	9c 93       	st	X, r25
    320c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320e:	fe 01       	movw	r30, r28
    3210:	eb 58       	subi	r30, 0x8B	; 139
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	80 81       	ld	r24, Z
    3216:	91 81       	ldd	r25, Z+1	; 0x01
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	d1 f6       	brne	.-76     	; 0x31d0 <main+0x19ae>
    321c:	27 c0       	rjmp	.+78     	; 0x326c <main+0x1a4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	8e 01       	movw	r16, r28
    3220:	0b 58       	subi	r16, 0x8B	; 139
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	fe 01       	movw	r30, r28
    3226:	e9 58       	subi	r30, 0x89	; 137
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	f8 01       	movw	r30, r16
    323c:	91 83       	std	Z+1, r25	; 0x01
    323e:	80 83       	st	Z, r24
    3240:	de 01       	movw	r26, r28
    3242:	af 58       	subi	r26, 0x8F	; 143
    3244:	bf 4f       	sbci	r27, 0xFF	; 255
    3246:	fe 01       	movw	r30, r28
    3248:	eb 58       	subi	r30, 0x8B	; 139
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	80 81       	ld	r24, Z
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	8d 93       	st	X+, r24
    3252:	9c 93       	st	X, r25
    3254:	fe 01       	movw	r30, r28
    3256:	ef 58       	subi	r30, 0x8F	; 143
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	91 81       	ldd	r25, Z+1	; 0x01
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <main+0x1a3c>
    3262:	fe 01       	movw	r30, r28
    3264:	ef 58       	subi	r30, 0x8F	; 143
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
						    		 _delay_ms(10);
						    		 UART_sendByte(s3);
    326c:	fe 01       	movw	r30, r28
    326e:	e5 5a       	subi	r30, 0xA5	; 165
    3270:	fe 4f       	sbci	r31, 0xFE	; 254
    3272:	80 81       	ld	r24, Z
    3274:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    3278:	fe 01       	movw	r30, r28
    327a:	e3 59       	subi	r30, 0x93	; 147
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	a0 e2       	ldi	r26, 0x20	; 32
    3284:	b1 e4       	ldi	r27, 0x41	; 65
    3286:	80 83       	st	Z, r24
    3288:	91 83       	std	Z+1, r25	; 0x01
    328a:	a2 83       	std	Z+2, r26	; 0x02
    328c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328e:	8e 01       	movw	r16, r28
    3290:	07 59       	subi	r16, 0x97	; 151
    3292:	1f 4f       	sbci	r17, 0xFF	; 255
    3294:	fe 01       	movw	r30, r28
    3296:	e3 59       	subi	r30, 0x93	; 147
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	60 81       	ld	r22, Z
    329c:	71 81       	ldd	r23, Z+1	; 0x01
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	93 81       	ldd	r25, Z+3	; 0x03
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	4a e7       	ldi	r20, 0x7A	; 122
    32a8:	53 e4       	ldi	r21, 0x43	; 67
    32aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	f8 01       	movw	r30, r16
    32b4:	80 83       	st	Z, r24
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	a2 83       	std	Z+2, r26	; 0x02
    32ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32bc:	fe 01       	movw	r30, r28
    32be:	e7 59       	subi	r30, 0x97	; 151
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	60 81       	ld	r22, Z
    32c4:	71 81       	ldd	r23, Z+1	; 0x01
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	44 f4       	brge	.+16     	; 0x32ea <main+0x1ac8>
		__ticks = 1;
    32da:	fe 01       	movw	r30, r28
    32dc:	e9 59       	subi	r30, 0x99	; 153
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
    32e8:	64 c0       	rjmp	.+200    	; 0x33b2 <main+0x1b90>
	else if (__tmp > 65535)
    32ea:	fe 01       	movw	r30, r28
    32ec:	e7 59       	subi	r30, 0x97	; 151
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	57 e4       	ldi	r21, 0x47	; 71
    3300:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3304:	18 16       	cp	r1, r24
    3306:	0c f0       	brlt	.+2      	; 0x330a <main+0x1ae8>
    3308:	43 c0       	rjmp	.+134    	; 0x3390 <main+0x1b6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330a:	fe 01       	movw	r30, r28
    330c:	e3 59       	subi	r30, 0x93	; 147
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	60 81       	ld	r22, Z
    3312:	71 81       	ldd	r23, Z+1	; 0x01
    3314:	82 81       	ldd	r24, Z+2	; 0x02
    3316:	93 81       	ldd	r25, Z+3	; 0x03
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e2       	ldi	r20, 0x20	; 32
    331e:	51 e4       	ldi	r21, 0x41	; 65
    3320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	8e 01       	movw	r16, r28
    332a:	09 59       	subi	r16, 0x99	; 153
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	f8 01       	movw	r30, r16
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
    3340:	1f c0       	rjmp	.+62     	; 0x3380 <main+0x1b5e>
    3342:	fe 01       	movw	r30, r28
    3344:	eb 59       	subi	r30, 0x9B	; 155
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	89 e1       	ldi	r24, 0x19	; 25
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	80 83       	st	Z, r24
    3350:	fe 01       	movw	r30, r28
    3352:	eb 59       	subi	r30, 0x9B	; 155
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <main+0x1b38>
    335e:	fe 01       	movw	r30, r28
    3360:	eb 59       	subi	r30, 0x9B	; 155
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	91 83       	std	Z+1, r25	; 0x01
    3366:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3368:	de 01       	movw	r26, r28
    336a:	a9 59       	subi	r26, 0x99	; 153
    336c:	bf 4f       	sbci	r27, 0xFF	; 255
    336e:	fe 01       	movw	r30, r28
    3370:	e9 59       	subi	r30, 0x99	; 153
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	11 96       	adiw	r26, 0x01	; 1
    337c:	9c 93       	st	X, r25
    337e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3380:	fe 01       	movw	r30, r28
    3382:	e9 59       	subi	r30, 0x99	; 153
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	80 81       	ld	r24, Z
    3388:	91 81       	ldd	r25, Z+1	; 0x01
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	d1 f6       	brne	.-76     	; 0x3342 <main+0x1b20>
    338e:	27 c0       	rjmp	.+78     	; 0x33de <main+0x1bbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	8e 01       	movw	r16, r28
    3392:	09 59       	subi	r16, 0x99	; 153
    3394:	1f 4f       	sbci	r17, 0xFF	; 255
    3396:	fe 01       	movw	r30, r28
    3398:	e7 59       	subi	r30, 0x97	; 151
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	60 81       	ld	r22, Z
    339e:	71 81       	ldd	r23, Z+1	; 0x01
    33a0:	82 81       	ldd	r24, Z+2	; 0x02
    33a2:	93 81       	ldd	r25, Z+3	; 0x03
    33a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	f8 01       	movw	r30, r16
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
    33b2:	de 01       	movw	r26, r28
    33b4:	ad 59       	subi	r26, 0x9D	; 157
    33b6:	bf 4f       	sbci	r27, 0xFF	; 255
    33b8:	fe 01       	movw	r30, r28
    33ba:	e9 59       	subi	r30, 0x99	; 153
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	8d 93       	st	X+, r24
    33c4:	9c 93       	st	X, r25
    33c6:	fe 01       	movw	r30, r28
    33c8:	ed 59       	subi	r30, 0x9D	; 157
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	80 81       	ld	r24, Z
    33ce:	91 81       	ldd	r25, Z+1	; 0x01
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <main+0x1bae>
    33d4:	fe 01       	movw	r30, r28
    33d6:	ed 59       	subi	r30, 0x9D	; 157
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24
						    		 _delay_ms(10);
						    		 UART_sendByte(s4);
    33de:	fe 01       	movw	r30, r28
    33e0:	e6 5a       	subi	r30, 0xA6	; 166
    33e2:	fe 4f       	sbci	r31, 0xFE	; 254
    33e4:	80 81       	ld	r24, Z
    33e6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    33ea:	fe 01       	movw	r30, r28
    33ec:	e1 5a       	subi	r30, 0xA1	; 161
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a0 e2       	ldi	r26, 0x20	; 32
    33f6:	b1 e4       	ldi	r27, 0x41	; 65
    33f8:	80 83       	st	Z, r24
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	a2 83       	std	Z+2, r26	; 0x02
    33fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3400:	8e 01       	movw	r16, r28
    3402:	05 5a       	subi	r16, 0xA5	; 165
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	fe 01       	movw	r30, r28
    3408:	e1 5a       	subi	r30, 0xA1	; 161
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	4a e7       	ldi	r20, 0x7A	; 122
    341a:	53 e4       	ldi	r21, 0x43	; 67
    341c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	f8 01       	movw	r30, r16
    3426:	80 83       	st	Z, r24
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	a2 83       	std	Z+2, r26	; 0x02
    342c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    342e:	fe 01       	movw	r30, r28
    3430:	e5 5a       	subi	r30, 0xA5	; 165
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	5f e3       	ldi	r21, 0x3F	; 63
    3444:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3448:	88 23       	and	r24, r24
    344a:	44 f4       	brge	.+16     	; 0x345c <main+0x1c3a>
		__ticks = 1;
    344c:	fe 01       	movw	r30, r28
    344e:	e7 5a       	subi	r30, 0xA7	; 167
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
    345a:	64 c0       	rjmp	.+200    	; 0x3524 <main+0x1d02>
	else if (__tmp > 65535)
    345c:	fe 01       	movw	r30, r28
    345e:	e5 5a       	subi	r30, 0xA5	; 165
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	60 81       	ld	r22, Z
    3464:	71 81       	ldd	r23, Z+1	; 0x01
    3466:	82 81       	ldd	r24, Z+2	; 0x02
    3468:	93 81       	ldd	r25, Z+3	; 0x03
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	0c f0       	brlt	.+2      	; 0x347c <main+0x1c5a>
    347a:	43 c0       	rjmp	.+134    	; 0x3502 <main+0x1ce0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347c:	fe 01       	movw	r30, r28
    347e:	e1 5a       	subi	r30, 0xA1	; 161
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e2       	ldi	r20, 0x20	; 32
    3490:	51 e4       	ldi	r21, 0x41	; 65
    3492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	8e 01       	movw	r16, r28
    349c:	07 5a       	subi	r16, 0xA7	; 167
    349e:	1f 4f       	sbci	r17, 0xFF	; 255
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	f8 01       	movw	r30, r16
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	80 83       	st	Z, r24
    34b2:	1f c0       	rjmp	.+62     	; 0x34f2 <main+0x1cd0>
    34b4:	fe 01       	movw	r30, r28
    34b6:	e9 5a       	subi	r30, 0xA9	; 169
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	89 e1       	ldi	r24, 0x19	; 25
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	80 83       	st	Z, r24
    34c2:	fe 01       	movw	r30, r28
    34c4:	e9 5a       	subi	r30, 0xA9	; 169
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <main+0x1caa>
    34d0:	fe 01       	movw	r30, r28
    34d2:	e9 5a       	subi	r30, 0xA9	; 169
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34da:	de 01       	movw	r26, r28
    34dc:	a7 5a       	subi	r26, 0xA7	; 167
    34de:	bf 4f       	sbci	r27, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	e7 5a       	subi	r30, 0xA7	; 167
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	11 96       	adiw	r26, 0x01	; 1
    34ee:	9c 93       	st	X, r25
    34f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f2:	fe 01       	movw	r30, r28
    34f4:	e7 5a       	subi	r30, 0xA7	; 167
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	91 81       	ldd	r25, Z+1	; 0x01
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	d1 f6       	brne	.-76     	; 0x34b4 <main+0x1c92>
    3500:	27 c0       	rjmp	.+78     	; 0x3550 <main+0x1d2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3502:	8e 01       	movw	r16, r28
    3504:	07 5a       	subi	r16, 0xA7	; 167
    3506:	1f 4f       	sbci	r17, 0xFF	; 255
    3508:	fe 01       	movw	r30, r28
    350a:	e5 5a       	subi	r30, 0xA5	; 165
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	60 81       	ld	r22, Z
    3510:	71 81       	ldd	r23, Z+1	; 0x01
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	f8 01       	movw	r30, r16
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
    3524:	de 01       	movw	r26, r28
    3526:	ab 5a       	subi	r26, 0xAB	; 171
    3528:	bf 4f       	sbci	r27, 0xFF	; 255
    352a:	fe 01       	movw	r30, r28
    352c:	e7 5a       	subi	r30, 0xA7	; 167
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	8d 93       	st	X+, r24
    3536:	9c 93       	st	X, r25
    3538:	fe 01       	movw	r30, r28
    353a:	eb 5a       	subi	r30, 0xAB	; 171
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <main+0x1d20>
    3546:	fe 01       	movw	r30, r28
    3548:	eb 5a       	subi	r30, 0xAB	; 171
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
						    		 _delay_ms(10);
						    		 UART_sendByte(s5);
    3550:	fe 01       	movw	r30, r28
    3552:	e7 5a       	subi	r30, 0xA7	; 167
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	80 81       	ld	r24, Z
    3558:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    355c:	fe 01       	movw	r30, r28
    355e:	ef 5a       	subi	r30, 0xAF	; 175
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a0 e2       	ldi	r26, 0x20	; 32
    3568:	b1 e4       	ldi	r27, 0x41	; 65
    356a:	80 83       	st	Z, r24
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	a2 83       	std	Z+2, r26	; 0x02
    3570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3572:	8e 01       	movw	r16, r28
    3574:	03 5b       	subi	r16, 0xB3	; 179
    3576:	1f 4f       	sbci	r17, 0xFF	; 255
    3578:	fe 01       	movw	r30, r28
    357a:	ef 5a       	subi	r30, 0xAF	; 175
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	60 81       	ld	r22, Z
    3580:	71 81       	ldd	r23, Z+1	; 0x01
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	4a e7       	ldi	r20, 0x7A	; 122
    358c:	53 e4       	ldi	r21, 0x43	; 67
    358e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	f8 01       	movw	r30, r16
    3598:	80 83       	st	Z, r24
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	a2 83       	std	Z+2, r26	; 0x02
    359e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35a0:	fe 01       	movw	r30, r28
    35a2:	e3 5b       	subi	r30, 0xB3	; 179
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	82 81       	ldd	r24, Z+2	; 0x02
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	40 e8       	ldi	r20, 0x80	; 128
    35b4:	5f e3       	ldi	r21, 0x3F	; 63
    35b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35ba:	88 23       	and	r24, r24
    35bc:	44 f4       	brge	.+16     	; 0x35ce <main+0x1dac>
		__ticks = 1;
    35be:	fe 01       	movw	r30, r28
    35c0:	e5 5b       	subi	r30, 0xB5	; 181
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	91 83       	std	Z+1, r25	; 0x01
    35ca:	80 83       	st	Z, r24
    35cc:	64 c0       	rjmp	.+200    	; 0x3696 <main+0x1e74>
	else if (__tmp > 65535)
    35ce:	fe 01       	movw	r30, r28
    35d0:	e3 5b       	subi	r30, 0xB3	; 179
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	3f ef       	ldi	r19, 0xFF	; 255
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	57 e4       	ldi	r21, 0x47	; 71
    35e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	0c f0       	brlt	.+2      	; 0x35ee <main+0x1dcc>
    35ec:	43 c0       	rjmp	.+134    	; 0x3674 <main+0x1e52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	fe 01       	movw	r30, r28
    35f0:	ef 5a       	subi	r30, 0xAF	; 175
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e2       	ldi	r20, 0x20	; 32
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	8e 01       	movw	r16, r28
    360e:	05 5b       	subi	r16, 0xB5	; 181
    3610:	1f 4f       	sbci	r17, 0xFF	; 255
    3612:	bc 01       	movw	r22, r24
    3614:	cd 01       	movw	r24, r26
    3616:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	f8 01       	movw	r30, r16
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	80 83       	st	Z, r24
    3624:	1f c0       	rjmp	.+62     	; 0x3664 <main+0x1e42>
    3626:	fe 01       	movw	r30, r28
    3628:	e7 5b       	subi	r30, 0xB7	; 183
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	89 e1       	ldi	r24, 0x19	; 25
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	80 83       	st	Z, r24
    3634:	fe 01       	movw	r30, r28
    3636:	e7 5b       	subi	r30, 0xB7	; 183
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <main+0x1e1c>
    3642:	fe 01       	movw	r30, r28
    3644:	e7 5b       	subi	r30, 0xB7	; 183
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364c:	de 01       	movw	r26, r28
    364e:	a5 5b       	subi	r26, 0xB5	; 181
    3650:	bf 4f       	sbci	r27, 0xFF	; 255
    3652:	fe 01       	movw	r30, r28
    3654:	e5 5b       	subi	r30, 0xB5	; 181
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	11 96       	adiw	r26, 0x01	; 1
    3660:	9c 93       	st	X, r25
    3662:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3664:	fe 01       	movw	r30, r28
    3666:	e5 5b       	subi	r30, 0xB5	; 181
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	80 81       	ld	r24, Z
    366c:	91 81       	ldd	r25, Z+1	; 0x01
    366e:	00 97       	sbiw	r24, 0x00	; 0
    3670:	d1 f6       	brne	.-76     	; 0x3626 <main+0x1e04>
    3672:	27 c0       	rjmp	.+78     	; 0x36c2 <main+0x1ea0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3674:	8e 01       	movw	r16, r28
    3676:	05 5b       	subi	r16, 0xB5	; 181
    3678:	1f 4f       	sbci	r17, 0xFF	; 255
    367a:	fe 01       	movw	r30, r28
    367c:	e3 5b       	subi	r30, 0xB3	; 179
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	f8 01       	movw	r30, r16
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
    3696:	de 01       	movw	r26, r28
    3698:	a9 5b       	subi	r26, 0xB9	; 185
    369a:	bf 4f       	sbci	r27, 0xFF	; 255
    369c:	fe 01       	movw	r30, r28
    369e:	e5 5b       	subi	r30, 0xB5	; 181
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	80 81       	ld	r24, Z
    36a4:	91 81       	ldd	r25, Z+1	; 0x01
    36a6:	8d 93       	st	X+, r24
    36a8:	9c 93       	st	X, r25
    36aa:	fe 01       	movw	r30, r28
    36ac:	e9 5b       	subi	r30, 0xB9	; 185
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <main+0x1e92>
    36b8:	fe 01       	movw	r30, r28
    36ba:	e9 5b       	subi	r30, 0xB9	; 185
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
						    		 _delay_ms(10);
						    		 UART_sendByte(s6);
    36c2:	fe 01       	movw	r30, r28
    36c4:	e8 5a       	subi	r30, 0xA8	; 168
    36c6:	fe 4f       	sbci	r31, 0xFE	; 254
    36c8:	80 81       	ld	r24, Z
    36ca:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    36ce:	fe 01       	movw	r30, r28
    36d0:	ed 5b       	subi	r30, 0xBD	; 189
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	a0 e2       	ldi	r26, 0x20	; 32
    36da:	b1 e4       	ldi	r27, 0x41	; 65
    36dc:	80 83       	st	Z, r24
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	a2 83       	std	Z+2, r26	; 0x02
    36e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e4:	8e 01       	movw	r16, r28
    36e6:	01 5c       	subi	r16, 0xC1	; 193
    36e8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ea:	fe 01       	movw	r30, r28
    36ec:	ed 5b       	subi	r30, 0xBD	; 189
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a e7       	ldi	r20, 0x7A	; 122
    36fe:	53 e4       	ldi	r21, 0x43	; 67
    3700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	f8 01       	movw	r30, r16
    370a:	80 83       	st	Z, r24
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	a2 83       	std	Z+2, r26	; 0x02
    3710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3712:	fe 01       	movw	r30, r28
    3714:	ff 96       	adiw	r30, 0x3f	; 63
    3716:	60 81       	ld	r22, Z
    3718:	71 81       	ldd	r23, Z+1	; 0x01
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	93 81       	ldd	r25, Z+3	; 0x03
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e8       	ldi	r20, 0x80	; 128
    3724:	5f e3       	ldi	r21, 0x3F	; 63
    3726:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    372a:	88 23       	and	r24, r24
    372c:	2c f4       	brge	.+10     	; 0x3738 <main+0x1f16>
		__ticks = 1;
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	9e af       	std	Y+62, r25	; 0x3e
    3734:	8d af       	std	Y+61, r24	; 0x3d
    3736:	46 c0       	rjmp	.+140    	; 0x37c4 <main+0x1fa2>
	else if (__tmp > 65535)
    3738:	fe 01       	movw	r30, r28
    373a:	ff 96       	adiw	r30, 0x3f	; 63
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	64 f5       	brge	.+88     	; 0x37ac <main+0x1f8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	fe 01       	movw	r30, r28
    3756:	ed 5b       	subi	r30, 0xBD	; 189
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	60 81       	ld	r22, Z
    375c:	71 81       	ldd	r23, Z+1	; 0x01
    375e:	82 81       	ldd	r24, Z+2	; 0x02
    3760:	93 81       	ldd	r25, Z+3	; 0x03
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	9e af       	std	Y+62, r25	; 0x3e
    3780:	8d af       	std	Y+61, r24	; 0x3d
    3782:	0f c0       	rjmp	.+30     	; 0x37a2 <main+0x1f80>
    3784:	89 e1       	ldi	r24, 0x19	; 25
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9c af       	std	Y+60, r25	; 0x3c
    378a:	8b af       	std	Y+59, r24	; 0x3b
    378c:	8b ad       	ldd	r24, Y+59	; 0x3b
    378e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <main+0x1f6e>
    3794:	9c af       	std	Y+60, r25	; 0x3c
    3796:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3798:	8d ad       	ldd	r24, Y+61	; 0x3d
    379a:	9e ad       	ldd	r25, Y+62	; 0x3e
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	9e af       	std	Y+62, r25	; 0x3e
    37a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	69 f7       	brne	.-38     	; 0x3784 <main+0x1f62>
    37aa:	16 c0       	rjmp	.+44     	; 0x37d8 <main+0x1fb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	fe 01       	movw	r30, r28
    37ae:	ff 96       	adiw	r30, 0x3f	; 63
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	9e af       	std	Y+62, r25	; 0x3e
    37c2:	8d af       	std	Y+61, r24	; 0x3d
    37c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    37c8:	9a af       	std	Y+58, r25	; 0x3a
    37ca:	89 af       	std	Y+57, r24	; 0x39
    37cc:	89 ad       	ldd	r24, Y+57	; 0x39
    37ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	f1 f7       	brne	.-4      	; 0x37d0 <main+0x1fae>
    37d4:	9a af       	std	Y+58, r25	; 0x3a
    37d6:	89 af       	std	Y+57, r24	; 0x39
						    		 _delay_ms(10);
						    		 UART_sendByte(s7);
    37d8:	fe 01       	movw	r30, r28
    37da:	e9 5a       	subi	r30, 0xA9	; 169
    37dc:	fe 4f       	sbci	r31, 0xFE	; 254
    37de:	80 81       	ld	r24, Z
    37e0:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a0 e2       	ldi	r26, 0x20	; 32
    37ea:	b1 e4       	ldi	r27, 0x41	; 65
    37ec:	8d ab       	std	Y+53, r24	; 0x35
    37ee:	9e ab       	std	Y+54, r25	; 0x36
    37f0:	af ab       	std	Y+55, r26	; 0x37
    37f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f4:	6d a9       	ldd	r22, Y+53	; 0x35
    37f6:	7e a9       	ldd	r23, Y+54	; 0x36
    37f8:	8f a9       	ldd	r24, Y+55	; 0x37
    37fa:	98 ad       	ldd	r25, Y+56	; 0x38
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	4a e7       	ldi	r20, 0x7A	; 122
    3802:	53 e4       	ldi	r21, 0x43	; 67
    3804:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	89 ab       	std	Y+49, r24	; 0x31
    380e:	9a ab       	std	Y+50, r25	; 0x32
    3810:	ab ab       	std	Y+51, r26	; 0x33
    3812:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3814:	69 a9       	ldd	r22, Y+49	; 0x31
    3816:	7a a9       	ldd	r23, Y+50	; 0x32
    3818:	8b a9       	ldd	r24, Y+51	; 0x33
    381a:	9c a9       	ldd	r25, Y+52	; 0x34
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	2c f4       	brge	.+10     	; 0x3836 <main+0x2014>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	98 ab       	std	Y+48, r25	; 0x30
    3832:	8f a7       	std	Y+47, r24	; 0x2f
    3834:	3f c0       	rjmp	.+126    	; 0x38b4 <main+0x2092>
	else if (__tmp > 65535)
    3836:	69 a9       	ldd	r22, Y+49	; 0x31
    3838:	7a a9       	ldd	r23, Y+50	; 0x32
    383a:	8b a9       	ldd	r24, Y+51	; 0x33
    383c:	9c a9       	ldd	r25, Y+52	; 0x34
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	4f e7       	ldi	r20, 0x7F	; 127
    3844:	57 e4       	ldi	r21, 0x47	; 71
    3846:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    384a:	18 16       	cp	r1, r24
    384c:	4c f5       	brge	.+82     	; 0x38a0 <main+0x207e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	6d a9       	ldd	r22, Y+53	; 0x35
    3850:	7e a9       	ldd	r23, Y+54	; 0x36
    3852:	8f a9       	ldd	r24, Y+55	; 0x37
    3854:	98 ad       	ldd	r25, Y+56	; 0x38
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	51 e4       	ldi	r21, 0x41	; 65
    385e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	98 ab       	std	Y+48, r25	; 0x30
    3874:	8f a7       	std	Y+47, r24	; 0x2f
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <main+0x2074>
    3878:	89 e1       	ldi	r24, 0x19	; 25
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	9e a7       	std	Y+46, r25	; 0x2e
    387e:	8d a7       	std	Y+45, r24	; 0x2d
    3880:	8d a5       	ldd	r24, Y+45	; 0x2d
    3882:	9e a5       	ldd	r25, Y+46	; 0x2e
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <main+0x2062>
    3888:	9e a7       	std	Y+46, r25	; 0x2e
    388a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388c:	8f a5       	ldd	r24, Y+47	; 0x2f
    388e:	98 a9       	ldd	r25, Y+48	; 0x30
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	98 ab       	std	Y+48, r25	; 0x30
    3894:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	8f a5       	ldd	r24, Y+47	; 0x2f
    3898:	98 a9       	ldd	r25, Y+48	; 0x30
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	69 f7       	brne	.-38     	; 0x3878 <main+0x2056>
    389e:	14 c0       	rjmp	.+40     	; 0x38c8 <main+0x20a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a0:	69 a9       	ldd	r22, Y+49	; 0x31
    38a2:	7a a9       	ldd	r23, Y+50	; 0x32
    38a4:	8b a9       	ldd	r24, Y+51	; 0x33
    38a6:	9c a9       	ldd	r25, Y+52	; 0x34
    38a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	98 ab       	std	Y+48, r25	; 0x30
    38b2:	8f a7       	std	Y+47, r24	; 0x2f
    38b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b6:	98 a9       	ldd	r25, Y+48	; 0x30
    38b8:	9c a7       	std	Y+44, r25	; 0x2c
    38ba:	8b a7       	std	Y+43, r24	; 0x2b
    38bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    38be:	9c a5       	ldd	r25, Y+44	; 0x2c
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <main+0x209e>
    38c4:	9c a7       	std	Y+44, r25	; 0x2c
    38c6:	8b a7       	std	Y+43, r24	; 0x2b
						    		 _delay_ms(10);
						    		 UART_sendByte(s8);
    38c8:	fe 01       	movw	r30, r28
    38ca:	ea 5a       	subi	r30, 0xAA	; 170
    38cc:	fe 4f       	sbci	r31, 0xFE	; 254
    38ce:	80 81       	ld	r24, Z
    38d0:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	a0 e2       	ldi	r26, 0x20	; 32
    38da:	b1 e4       	ldi	r27, 0x41	; 65
    38dc:	8f a3       	std	Y+39, r24	; 0x27
    38de:	98 a7       	std	Y+40, r25	; 0x28
    38e0:	a9 a7       	std	Y+41, r26	; 0x29
    38e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e4:	6f a1       	ldd	r22, Y+39	; 0x27
    38e6:	78 a5       	ldd	r23, Y+40	; 0x28
    38e8:	89 a5       	ldd	r24, Y+41	; 0x29
    38ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	4a e7       	ldi	r20, 0x7A	; 122
    38f2:	53 e4       	ldi	r21, 0x43	; 67
    38f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	8b a3       	std	Y+35, r24	; 0x23
    38fe:	9c a3       	std	Y+36, r25	; 0x24
    3900:	ad a3       	std	Y+37, r26	; 0x25
    3902:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3904:	6b a1       	ldd	r22, Y+35	; 0x23
    3906:	7c a1       	ldd	r23, Y+36	; 0x24
    3908:	8d a1       	ldd	r24, Y+37	; 0x25
    390a:	9e a1       	ldd	r25, Y+38	; 0x26
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e8       	ldi	r20, 0x80	; 128
    3912:	5f e3       	ldi	r21, 0x3F	; 63
    3914:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3918:	88 23       	and	r24, r24
    391a:	2c f4       	brge	.+10     	; 0x3926 <main+0x2104>
		__ticks = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	9a a3       	std	Y+34, r25	; 0x22
    3922:	89 a3       	std	Y+33, r24	; 0x21
    3924:	3f c0       	rjmp	.+126    	; 0x39a4 <main+0x2182>
	else if (__tmp > 65535)
    3926:	6b a1       	ldd	r22, Y+35	; 0x23
    3928:	7c a1       	ldd	r23, Y+36	; 0x24
    392a:	8d a1       	ldd	r24, Y+37	; 0x25
    392c:	9e a1       	ldd	r25, Y+38	; 0x26
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	3f ef       	ldi	r19, 0xFF	; 255
    3932:	4f e7       	ldi	r20, 0x7F	; 127
    3934:	57 e4       	ldi	r21, 0x47	; 71
    3936:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    393a:	18 16       	cp	r1, r24
    393c:	4c f5       	brge	.+82     	; 0x3990 <main+0x216e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393e:	6f a1       	ldd	r22, Y+39	; 0x27
    3940:	78 a5       	ldd	r23, Y+40	; 0x28
    3942:	89 a5       	ldd	r24, Y+41	; 0x29
    3944:	9a a5       	ldd	r25, Y+42	; 0x2a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e2       	ldi	r20, 0x20	; 32
    394c:	51 e4       	ldi	r21, 0x41	; 65
    394e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	9a a3       	std	Y+34, r25	; 0x22
    3964:	89 a3       	std	Y+33, r24	; 0x21
    3966:	0f c0       	rjmp	.+30     	; 0x3986 <main+0x2164>
    3968:	89 e1       	ldi	r24, 0x19	; 25
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	98 a3       	std	Y+32, r25	; 0x20
    396e:	8f 8f       	std	Y+31, r24	; 0x1f
    3970:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3972:	98 a1       	ldd	r25, Y+32	; 0x20
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <main+0x2152>
    3978:	98 a3       	std	Y+32, r25	; 0x20
    397a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397c:	89 a1       	ldd	r24, Y+33	; 0x21
    397e:	9a a1       	ldd	r25, Y+34	; 0x22
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	9a a3       	std	Y+34, r25	; 0x22
    3984:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	89 a1       	ldd	r24, Y+33	; 0x21
    3988:	9a a1       	ldd	r25, Y+34	; 0x22
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	69 f7       	brne	.-38     	; 0x3968 <main+0x2146>
    398e:	14 c0       	rjmp	.+40     	; 0x39b8 <main+0x2196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3990:	6b a1       	ldd	r22, Y+35	; 0x23
    3992:	7c a1       	ldd	r23, Y+36	; 0x24
    3994:	8d a1       	ldd	r24, Y+37	; 0x25
    3996:	9e a1       	ldd	r25, Y+38	; 0x26
    3998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	9a a3       	std	Y+34, r25	; 0x22
    39a2:	89 a3       	std	Y+33, r24	; 0x21
    39a4:	89 a1       	ldd	r24, Y+33	; 0x21
    39a6:	9a a1       	ldd	r25, Y+34	; 0x22
    39a8:	9e 8f       	std	Y+30, r25	; 0x1e
    39aa:	8d 8f       	std	Y+29, r24	; 0x1d
    39ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <main+0x218e>
    39b4:	9e 8f       	std	Y+30, r25	; 0x1e
    39b6:	8d 8f       	std	Y+29, r24	; 0x1d
						    		 _delay_ms(10);

						    		 LCD_clearScreen();
    39b8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
						    		 LCD_displayString("password changed");
    39bc:	8c ec       	ldi	r24, 0xCC	; 204
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	aa e7       	ldi	r26, 0x7A	; 122
    39ca:	b4 e4       	ldi	r27, 0x44	; 68
    39cc:	89 8f       	std	Y+25, r24	; 0x19
    39ce:	9a 8f       	std	Y+26, r25	; 0x1a
    39d0:	ab 8f       	std	Y+27, r26	; 0x1b
    39d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	69 8d       	ldd	r22, Y+25	; 0x19
    39d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a e7       	ldi	r20, 0x7A	; 122
    39e2:	53 e4       	ldi	r21, 0x43	; 67
    39e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	8d 8b       	std	Y+21, r24	; 0x15
    39ee:	9e 8b       	std	Y+22, r25	; 0x16
    39f0:	af 8b       	std	Y+23, r26	; 0x17
    39f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39f4:	6d 89       	ldd	r22, Y+21	; 0x15
    39f6:	7e 89       	ldd	r23, Y+22	; 0x16
    39f8:	8f 89       	ldd	r24, Y+23	; 0x17
    39fa:	98 8d       	ldd	r25, Y+24	; 0x18
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <main+0x21f4>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9c 8b       	std	Y+20, r25	; 0x14
    3a12:	8b 8b       	std	Y+19, r24	; 0x13
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <main+0x2272>
	else if (__tmp > 65535)
    3a16:	6d 89       	ldd	r22, Y+21	; 0x15
    3a18:	7e 89       	ldd	r23, Y+22	; 0x16
    3a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <main+0x225e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9c 8b       	std	Y+20, r25	; 0x14
    3a54:	8b 8b       	std	Y+19, r24	; 0x13
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <main+0x2254>
    3a58:	89 e1       	ldi	r24, 0x19	; 25
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9a 8b       	std	Y+18, r25	; 0x12
    3a5e:	89 8b       	std	Y+17, r24	; 0x11
    3a60:	89 89       	ldd	r24, Y+17	; 0x11
    3a62:	9a 89       	ldd	r25, Y+18	; 0x12
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <main+0x2242>
    3a68:	9a 8b       	std	Y+18, r25	; 0x12
    3a6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9c 8b       	std	Y+20, r25	; 0x14
    3a74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8b 89       	ldd	r24, Y+19	; 0x13
    3a78:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <main+0x2236>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <main+0x2286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	6d 89       	ldd	r22, Y+21	; 0x15
    3a82:	7e 89       	ldd	r23, Y+22	; 0x16
    3a84:	8f 89       	ldd	r24, Y+23	; 0x17
    3a86:	98 8d       	ldd	r25, Y+24	; 0x18
    3a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9c 8b       	std	Y+20, r25	; 0x14
    3a92:	8b 8b       	std	Y+19, r24	; 0x13
    3a94:	8b 89       	ldd	r24, Y+19	; 0x13
    3a96:	9c 89       	ldd	r25, Y+20	; 0x14
    3a98:	98 8b       	std	Y+16, r25	; 0x10
    3a9a:	8f 87       	std	Y+15, r24	; 0x0f
    3a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9e:	98 89       	ldd	r25, Y+16	; 0x10
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <main+0x227e>
    3aa4:	98 8b       	std	Y+16, r25	; 0x10
    3aa6:	8f 87       	std	Y+15, r24	; 0x0f
						    		 _delay_ms(1000);
						    		 LCD_clearScreen();
    3aa8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
						 	         loop=1; // to get out from while loop
    3aac:	fe 01       	movw	r30, r28
    3aae:	ec 5a       	subi	r30, 0xAC	; 172
    3ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	80 83       	st	Z, r24
						    	 LCD_displayString("enter password");
						    	 LCD_displayStringRowColumn(1,0,"without (0 or #)");
						    	 _delay_ms(1000);
						    	 LCD_clearScreen();

				while(loop == 0 ){ // use while loop to can save the all pressed key (new pass) from user
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ec 5a       	subi	r30, 0xAC	; 172
    3aba:	fe 4f       	sbci	r31, 0xFE	; 254
    3abc:	80 81       	ld	r24, Z
    3abe:	88 23       	and	r24, r24
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <main+0x22a2>
    3ac2:	37 c9       	rjmp	.-3474   	; 0x2d32 <main+0x1510>
}
						         }
						     /***************************/


						     i=0;
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e1 5a       	subi	r30, 0xA1	; 161
    3ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aca:	10 82       	st	Z, r1
						     c=0;
    3acc:	fe 01       	movw	r30, r28
    3ace:	ed 5a       	subi	r30, 0xAD	; 173
    3ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad2:	10 82       	st	Z, r1
				/* write the code in while loop to ask again and again
				 * what the user want
				 */


while(count==8){
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e2 5a       	subi	r30, 0xA2	; 162
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	80 81       	ld	r24, Z
    3adc:	88 30       	cpi	r24, 0x08	; 8
    3ade:	11 f4       	brne	.+4      	; 0x3ae4 <main+0x22c2>
    3ae0:	0c 94 32 14 	jmp	0x2864	; 0x2864 <main+0x1042>
    3ae4:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <main+0xdda>
							 * repeat the code
							 * if (buzzer == 3) stop every thing using infinite loop
							 *
							 */
							 while(buzzer==3){
								 LCD_clearScreen();
    3ae8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
								 LCD_displayString("restart");
    3aec:	8d ed       	ldi	r24, 0xDD	; 221
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
								 LCD_displayStringRowColumn(1, 0 ,"wrong password" );
    3af4:	25 ee       	ldi	r18, 0xE5	; 229
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	a9 01       	movw	r20, r18
    3afe:	0e 94 cb 0b 	call	0x1796	; 0x1796 <LCD_displayStringRowColumn>
								 UART_sendByte(4);
    3b02:	84 e0       	ldi	r24, 0x04	; 4
    3b04:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
							 * increment the counter (buzzer)
							 * repeat the code
							 * if (buzzer == 3) stop every thing using infinite loop
							 *
							 */
							 while(buzzer==3){
    3b08:	fe 01       	movw	r30, r28
    3b0a:	ee 5a       	subi	r30, 0xAE	; 174
    3b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0e:	80 81       	ld	r24, Z
    3b10:	83 30       	cpi	r24, 0x03	; 3
    3b12:	51 f3       	breq	.-44     	; 0x3ae8 <main+0x22c6>
								 LCD_clearScreen();
								 LCD_displayString("restart");
								 LCD_displayStringRowColumn(1, 0 ,"wrong password" );
								 UART_sendByte(4);
							 }
							 LCD_clearScreen();
    3b14:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
							 LCD_displayString("wrong password");
    3b18:	85 ee       	ldi	r24, 0xE5	; 229
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_displayString>
							 LCD_displayStringRowColumn(1, 0 ,"try again" );
    3b20:	24 ef       	ldi	r18, 0xF4	; 244
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	a9 01       	movw	r20, r18
    3b2a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <LCD_displayStringRowColumn>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	aa e7       	ldi	r26, 0x7A	; 122
    3b34:	b4 e4       	ldi	r27, 0x44	; 68
    3b36:	8b 87       	std	Y+11, r24	; 0x0b
    3b38:	9c 87       	std	Y+12, r25	; 0x0c
    3b3a:	ad 87       	std	Y+13, r26	; 0x0d
    3b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	4a e7       	ldi	r20, 0x7A	; 122
    3b4c:	53 e4       	ldi	r21, 0x43	; 67
    3b4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	8f 83       	std	Y+7, r24	; 0x07
    3b58:	98 87       	std	Y+8, r25	; 0x08
    3b5a:	a9 87       	std	Y+9, r26	; 0x09
    3b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e8       	ldi	r20, 0x80	; 128
    3b6c:	5f e3       	ldi	r21, 0x3F	; 63
    3b6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b72:	88 23       	and	r24, r24
    3b74:	2c f4       	brge	.+10     	; 0x3b80 <main+0x235e>
		__ticks = 1;
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
    3b7e:	3f c0       	rjmp	.+126    	; 0x3bfe <main+0x23dc>
	else if (__tmp > 65535)
    3b80:	6f 81       	ldd	r22, Y+7	; 0x07
    3b82:	78 85       	ldd	r23, Y+8	; 0x08
    3b84:	89 85       	ldd	r24, Y+9	; 0x09
    3b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	3f ef       	ldi	r19, 0xFF	; 255
    3b8c:	4f e7       	ldi	r20, 0x7F	; 127
    3b8e:	57 e4       	ldi	r21, 0x47	; 71
    3b90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b94:	18 16       	cp	r1, r24
    3b96:	4c f5       	brge	.+82     	; 0x3bea <main+0x23c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e2       	ldi	r20, 0x20	; 32
    3ba6:	51 e4       	ldi	r21, 0x41	; 65
    3ba8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	bc 01       	movw	r22, r24
    3bb2:	cd 01       	movw	r24, r26
    3bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <main+0x23be>
    3bc2:	89 e1       	ldi	r24, 0x19	; 25
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9c 83       	std	Y+4, r25	; 0x04
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <main+0x23ac>
    3bd2:	9c 83       	std	Y+4, r25	; 0x04
    3bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	9e 83       	std	Y+6, r25	; 0x06
    3bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be0:	8d 81       	ldd	r24, Y+5	; 0x05
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	69 f7       	brne	.-38     	; 0x3bc2 <main+0x23a0>
    3be8:	14 c0       	rjmp	.+40     	; 0x3c12 <main+0x23f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bea:	6f 81       	ldd	r22, Y+7	; 0x07
    3bec:	78 85       	ldd	r23, Y+8	; 0x08
    3bee:	89 85       	ldd	r24, Y+9	; 0x09
    3bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <main+0x23e8>
    3c0e:	9a 83       	std	Y+2, r25	; 0x02
    3c10:	89 83       	std	Y+1, r24	; 0x01
							 _delay_ms(1000);
							 LCD_clearScreen();
    3c12:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_clearScreen>
							 buzzer++ ;
    3c16:	de 01       	movw	r26, r28
    3c18:	ae 5a       	subi	r26, 0xAE	; 174
    3c1a:	be 4f       	sbci	r27, 0xFE	; 254
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	ee 5a       	subi	r30, 0xAE	; 174
    3c20:	fe 4f       	sbci	r31, 0xFE	; 254
    3c22:	80 81       	ld	r24, Z
    3c24:	8f 5f       	subi	r24, 0xFF	; 255
    3c26:	8c 93       	st	X, r24
							 i=0;
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e1 5a       	subi	r30, 0xA1	; 161
    3c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2e:	10 82       	st	Z, r1
							 count=0;
    3c30:	fe 01       	movw	r30, r28
    3c32:	e2 5a       	subi	r30, 0xA2	; 162
    3c34:	fe 4f       	sbci	r31, 0xFE	; 254
    3c36:	10 82       	st	Z, r1
    3c38:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <main+0xdda>

00003c3c <UART_init>:

#include "uart.h"

#define BAUD_RRESCALE ((( F_CPU) / (USART_BAUDRATE * 8UL))-1)

void UART_init(void){
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62

	UCSRA |=(1<<U2X); // double speed
    3c44:	ab e2       	ldi	r26, 0x2B	; 43
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	eb e2       	ldi	r30, 0x2B	; 43
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	82 60       	ori	r24, 0x02	; 2
    3c50:	8c 93       	st	X, r24
     * disable Transmit Data Bit 8  [TXB8=0]
     * disable Receive  Data Bit 8  [RXB8=0]
     * Character Size --> 8bit [UCSZ2=0]
	 */

	UCSRB |=(1<<RXEN)|(1<<TXEN);
    3c52:	aa e2       	ldi	r26, 0x2A	; 42
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	ea e2       	ldi	r30, 0x2A	; 42
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	88 61       	ori	r24, 0x18	; 24
    3c5e:	8c 93       	st	X, r24
	 * 1 stop bit [USBS=0]
	 * 8 bit [UCSZ2=0 , UCSZ1=1 & UCSZ0=1]
	 * disable clock polarity [UCPOL=0]
	 */

	UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    3c60:	a0 e4       	ldi	r26, 0x40	; 64
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	e0 e4       	ldi	r30, 0x40	; 64
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	86 68       	ori	r24, 0x86	; 134
    3c6c:	8c 93       	st	X, r24

    // write the baud pre-scaler on Baud Rate Registers
	UBRRH = BAUD_RRESCALE >> 8;
    3c6e:	e0 e4       	ldi	r30, 0x40	; 64
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	10 82       	st	Z, r1
	UBRRL = BAUD_RRESCALE ;
    3c74:	e9 e2       	ldi	r30, 0x29	; 41
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	8c e0       	ldi	r24, 0x0C	; 12
    3c7a:	80 83       	st	Z, r24

}
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	08 95       	ret

00003c82 <UART_sendByte>:

void UART_sendByte(uint8 data){
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	0f 92       	push	r0
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c8e:	eb e2       	ldi	r30, 0x2B	; 43
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	80 81       	ld	r24, Z
    3c94:	88 2f       	mov	r24, r24
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	80 72       	andi	r24, 0x20	; 32
    3c9a:	90 70       	andi	r25, 0x00	; 0
    3c9c:	00 97       	sbiw	r24, 0x00	; 0
    3c9e:	b9 f3       	breq	.-18     	; 0x3c8e <UART_sendByte+0xc>

	UDR=data;
    3ca0:	ec e2       	ldi	r30, 0x2C	; 44
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	80 83       	st	Z, r24

}
    3ca8:	0f 90       	pop	r0
    3caa:	cf 91       	pop	r28
    3cac:	df 91       	pop	r29
    3cae:	08 95       	ret

00003cb0 <UART_reseiveByte>:

uint8 UART_reseiveByte(void){
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62

	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3cb8:	eb e2       	ldi	r30, 0x2B	; 43
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	88 23       	and	r24, r24
    3cc0:	dc f7       	brge	.-10     	; 0x3cb8 <UART_reseiveByte+0x8>

	return UDR ;
    3cc2:	ec e2       	ldi	r30, 0x2C	; 44
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	80 81       	ld	r24, Z
}
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <UART_sendString>:


void UART_sendString(const uint8 *str){
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <UART_sendString+0x6>
    3cd4:	0f 92       	push	r0
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	9b 83       	std	Y+3, r25	; 0x03
    3cdc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3cde:	19 82       	std	Y+1, r1	; 0x01
    3ce0:	0e c0       	rjmp	.+28     	; 0x3cfe <UART_sendString+0x30>
	while(str[i]!='\0'){
		UART_sendByte(str[i]);
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	9b 81       	ldd	r25, Y+3	; 0x03
    3cec:	fc 01       	movw	r30, r24
    3cee:	e2 0f       	add	r30, r18
    3cf0:	f3 1f       	adc	r31, r19
    3cf2:	80 81       	ld	r24, Z
    3cf4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
		i++;
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	8f 5f       	subi	r24, 0xFF	; 255
    3cfc:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(const uint8 *str){
	uint8 i=0;
	while(str[i]!='\0'){
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	28 2f       	mov	r18, r24
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	9b 81       	ldd	r25, Y+3	; 0x03
    3d08:	fc 01       	movw	r30, r24
    3d0a:	e2 0f       	add	r30, r18
    3d0c:	f3 1f       	adc	r31, r19
    3d0e:	80 81       	ld	r24, Z
    3d10:	88 23       	and	r24, r24
    3d12:	39 f7       	brne	.-50     	; 0x3ce2 <UART_sendString+0x14>
		UART_sendByte(str[i]);
		i++;
	}
}
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	cf 91       	pop	r28
    3d1c:	df 91       	pop	r29
    3d1e:	08 95       	ret

00003d20 <UART_reseiveString>:

void UART_reseiveString(uint8 *str){
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <UART_reseiveString+0xa>
    3d2a:	0f 92       	push	r0
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	9b 83       	std	Y+3, r25	; 0x03
    3d32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3d34:	19 82       	std	Y+1, r1	; 0x01
	str[i]= UART_reseiveByte();
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	28 2f       	mov	r18, r24
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d40:	8c 01       	movw	r16, r24
    3d42:	02 0f       	add	r16, r18
    3d44:	13 1f       	adc	r17, r19
    3d46:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    3d4a:	f8 01       	movw	r30, r16
    3d4c:	80 83       	st	Z, r24
    3d4e:	0f c0       	rjmp	.+30     	; 0x3d6e <UART_reseiveString+0x4e>
	while(str[i]!= '*'){
		i++;
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	8f 5f       	subi	r24, 0xFF	; 255
    3d54:	89 83       	std	Y+1, r24	; 0x01
		str[i]= UART_reseiveByte();
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d60:	8c 01       	movw	r16, r24
    3d62:	02 0f       	add	r16, r18
    3d64:	13 1f       	adc	r17, r19
    3d66:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	80 83       	st	Z, r24
}

void UART_reseiveString(uint8 *str){
	uint8 i=0;
	str[i]= UART_reseiveByte();
	while(str[i]!= '*'){
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	28 2f       	mov	r18, r24
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	9b 81       	ldd	r25, Y+3	; 0x03
    3d78:	fc 01       	movw	r30, r24
    3d7a:	e2 0f       	add	r30, r18
    3d7c:	f3 1f       	adc	r31, r19
    3d7e:	80 81       	ld	r24, Z
    3d80:	8a 32       	cpi	r24, 0x2A	; 42
    3d82:	31 f7       	brne	.-52     	; 0x3d50 <UART_reseiveString+0x30>
		i++;
		str[i]= UART_reseiveByte();
	}
	str[i]='\0';
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	28 2f       	mov	r18, r24
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8e:	fc 01       	movw	r30, r24
    3d90:	e2 0f       	add	r30, r18
    3d92:	f3 1f       	adc	r31, r19
    3d94:	10 82       	st	Z, r1
}
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	08 95       	ret

00003da6 <UART_sendPass>:

void UART_sendPass(uint8 arr[]){
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	00 d0       	rcall	.+0      	; 0x3dac <UART_sendPass+0x6>
    3dac:	0f 92       	push	r0
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	9b 83       	std	Y+3, r25	; 0x03
    3db4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3db6:	19 82       	std	Y+1, r1	; 0x01
    3db8:	0e c0       	rjmp	.+28     	; 0x3dd6 <UART_sendPass+0x30>
	while(arr[i]!='\0'){
		UART_sendByte(arr[i]);
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	e2 0f       	add	r30, r18
    3dc8:	f3 1f       	adc	r31, r19
    3dca:	80 81       	ld	r24, Z
    3dcc:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <UART_sendByte>
		i++;
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	8f 5f       	subi	r24, 0xFF	; 255
    3dd4:	89 83       	std	Y+1, r24	; 0x01
	str[i]='\0';
}

void UART_sendPass(uint8 arr[]){
	uint8 i=0;
	while(arr[i]!='\0'){
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	28 2f       	mov	r18, r24
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	9b 81       	ldd	r25, Y+3	; 0x03
    3de0:	fc 01       	movw	r30, r24
    3de2:	e2 0f       	add	r30, r18
    3de4:	f3 1f       	adc	r31, r19
    3de6:	80 81       	ld	r24, Z
    3de8:	88 23       	and	r24, r24
    3dea:	39 f7       	brne	.-50     	; 0x3dba <UART_sendPass+0x14>
		UART_sendByte(arr[i]);
		i++;
	}
}
    3dec:	0f 90       	pop	r0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	cf 91       	pop	r28
    3df4:	df 91       	pop	r29
    3df6:	08 95       	ret

00003df8 <UART_reseivePass>:


void UART_reseivePass(uint8 arr[]){
    3df8:	0f 93       	push	r16
    3dfa:	1f 93       	push	r17
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <UART_reseivePass+0xa>
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9b 83       	std	Y+3, r25	; 0x03
    3e0a:	8a 83       	std	Y+2, r24	; 0x02

	    uint8 i=0;
    3e0c:	19 82       	std	Y+1, r1	; 0x01
		arr[i]= UART_reseiveByte();
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	28 2f       	mov	r18, r24
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	9b 81       	ldd	r25, Y+3	; 0x03
    3e18:	8c 01       	movw	r16, r24
    3e1a:	02 0f       	add	r16, r18
    3e1c:	13 1f       	adc	r17, r19
    3e1e:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    3e22:	f8 01       	movw	r30, r16
    3e24:	80 83       	st	Z, r24
    3e26:	0f c0       	rjmp	.+30     	; 0x3e46 <UART_reseivePass+0x4e>
		while(arr[i]!='*'){
			i++;
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	89 83       	std	Y+1, r24	; 0x01
			arr[i]= UART_reseiveByte();
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	28 2f       	mov	r18, r24
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	9b 81       	ldd	r25, Y+3	; 0x03
    3e38:	8c 01       	movw	r16, r24
    3e3a:	02 0f       	add	r16, r18
    3e3c:	13 1f       	adc	r17, r19
    3e3e:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <UART_reseiveByte>
    3e42:	f8 01       	movw	r30, r16
    3e44:	80 83       	st	Z, r24

void UART_reseivePass(uint8 arr[]){

	    uint8 i=0;
		arr[i]= UART_reseiveByte();
		while(arr[i]!='*'){
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	28 2f       	mov	r18, r24
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e50:	fc 01       	movw	r30, r24
    3e52:	e2 0f       	add	r30, r18
    3e54:	f3 1f       	adc	r31, r19
    3e56:	80 81       	ld	r24, Z
    3e58:	8a 32       	cpi	r24, 0x2A	; 42
    3e5a:	31 f7       	brne	.-52     	; 0x3e28 <UART_reseivePass+0x30>
			i++;
			arr[i]= UART_reseiveByte();
		}
		arr[i]='\0';
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	28 2f       	mov	r18, r24
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	8a 81       	ldd	r24, Y+2	; 0x02
    3e64:	9b 81       	ldd	r25, Y+3	; 0x03
    3e66:	fc 01       	movw	r30, r24
    3e68:	e2 0f       	add	r30, r18
    3e6a:	f3 1f       	adc	r31, r19
    3e6c:	10 82       	st	Z, r1
}
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	08 95       	ret

00003e7e <__prologue_saves__>:
    3e7e:	2f 92       	push	r2
    3e80:	3f 92       	push	r3
    3e82:	4f 92       	push	r4
    3e84:	5f 92       	push	r5
    3e86:	6f 92       	push	r6
    3e88:	7f 92       	push	r7
    3e8a:	8f 92       	push	r8
    3e8c:	9f 92       	push	r9
    3e8e:	af 92       	push	r10
    3e90:	bf 92       	push	r11
    3e92:	cf 92       	push	r12
    3e94:	df 92       	push	r13
    3e96:	ef 92       	push	r14
    3e98:	ff 92       	push	r15
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	ca 1b       	sub	r28, r26
    3ea8:	db 0b       	sbc	r29, r27
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	09 94       	ijmp

00003eb6 <__epilogue_restores__>:
    3eb6:	2a 88       	ldd	r2, Y+18	; 0x12
    3eb8:	39 88       	ldd	r3, Y+17	; 0x11
    3eba:	48 88       	ldd	r4, Y+16	; 0x10
    3ebc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ebe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ec0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ec2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ec4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ec6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ec8:	b9 84       	ldd	r11, Y+9	; 0x09
    3eca:	c8 84       	ldd	r12, Y+8	; 0x08
    3ecc:	df 80       	ldd	r13, Y+7	; 0x07
    3ece:	ee 80       	ldd	r14, Y+6	; 0x06
    3ed0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ed2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ed4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ed6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ed8:	b9 81       	ldd	r27, Y+1	; 0x01
    3eda:	ce 0f       	add	r28, r30
    3edc:	d1 1d       	adc	r29, r1
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	ed 01       	movw	r28, r26
    3eea:	08 95       	ret

00003eec <itoa>:
    3eec:	fb 01       	movw	r30, r22
    3eee:	9f 01       	movw	r18, r30
    3ef0:	e8 94       	clt
    3ef2:	42 30       	cpi	r20, 0x02	; 2
    3ef4:	c4 f0       	brlt	.+48     	; 0x3f26 <itoa+0x3a>
    3ef6:	45 32       	cpi	r20, 0x25	; 37
    3ef8:	b4 f4       	brge	.+44     	; 0x3f26 <itoa+0x3a>
    3efa:	4a 30       	cpi	r20, 0x0A	; 10
    3efc:	29 f4       	brne	.+10     	; 0x3f08 <itoa+0x1c>
    3efe:	97 fb       	bst	r25, 7
    3f00:	1e f4       	brtc	.+6      	; 0x3f08 <itoa+0x1c>
    3f02:	90 95       	com	r25
    3f04:	81 95       	neg	r24
    3f06:	9f 4f       	sbci	r25, 0xFF	; 255
    3f08:	64 2f       	mov	r22, r20
    3f0a:	77 27       	eor	r23, r23
    3f0c:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__udivmodhi4>
    3f10:	80 5d       	subi	r24, 0xD0	; 208
    3f12:	8a 33       	cpi	r24, 0x3A	; 58
    3f14:	0c f0       	brlt	.+2      	; 0x3f18 <itoa+0x2c>
    3f16:	89 5d       	subi	r24, 0xD9	; 217
    3f18:	81 93       	st	Z+, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	a1 f7       	brne	.-24     	; 0x3f08 <itoa+0x1c>
    3f20:	16 f4       	brtc	.+4      	; 0x3f26 <itoa+0x3a>
    3f22:	5d e2       	ldi	r21, 0x2D	; 45
    3f24:	51 93       	st	Z+, r21
    3f26:	10 82       	st	Z, r1
    3f28:	c9 01       	movw	r24, r18
    3f2a:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <strrev>

00003f2e <strrev>:
    3f2e:	dc 01       	movw	r26, r24
    3f30:	fc 01       	movw	r30, r24
    3f32:	67 2f       	mov	r22, r23
    3f34:	71 91       	ld	r23, Z+
    3f36:	77 23       	and	r23, r23
    3f38:	e1 f7       	brne	.-8      	; 0x3f32 <strrev+0x4>
    3f3a:	32 97       	sbiw	r30, 0x02	; 2
    3f3c:	04 c0       	rjmp	.+8      	; 0x3f46 <strrev+0x18>
    3f3e:	7c 91       	ld	r23, X
    3f40:	6d 93       	st	X+, r22
    3f42:	70 83       	st	Z, r23
    3f44:	62 91       	ld	r22, -Z
    3f46:	ae 17       	cp	r26, r30
    3f48:	bf 07       	cpc	r27, r31
    3f4a:	c8 f3       	brcs	.-14     	; 0x3f3e <strrev+0x10>
    3f4c:	08 95       	ret

00003f4e <__udivmodhi4>:
    3f4e:	aa 1b       	sub	r26, r26
    3f50:	bb 1b       	sub	r27, r27
    3f52:	51 e1       	ldi	r21, 0x11	; 17
    3f54:	07 c0       	rjmp	.+14     	; 0x3f64 <__udivmodhi4_ep>

00003f56 <__udivmodhi4_loop>:
    3f56:	aa 1f       	adc	r26, r26
    3f58:	bb 1f       	adc	r27, r27
    3f5a:	a6 17       	cp	r26, r22
    3f5c:	b7 07       	cpc	r27, r23
    3f5e:	10 f0       	brcs	.+4      	; 0x3f64 <__udivmodhi4_ep>
    3f60:	a6 1b       	sub	r26, r22
    3f62:	b7 0b       	sbc	r27, r23

00003f64 <__udivmodhi4_ep>:
    3f64:	88 1f       	adc	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	5a 95       	dec	r21
    3f6a:	a9 f7       	brne	.-22     	; 0x3f56 <__udivmodhi4_loop>
    3f6c:	80 95       	com	r24
    3f6e:	90 95       	com	r25
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	08 95       	ret

00003f76 <_exit>:
    3f76:	f8 94       	cli

00003f78 <__stop_program>:
    3f78:	ff cf       	rjmp	.-2      	; 0x3f78 <__stop_program>
